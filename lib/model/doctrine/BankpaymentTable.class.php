<?php

/**
 * BankpaymentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BankpaymentTable extends Doctrine_Table
{

    const STAT_NEW = 1;
    const STAT_PROCESS = 2;
    const STAT_SUCCESS = 3;
    const STAT_FAILED_CHARGE = 4;
    const STAT_BANKPAYMENT_AMOUNT = 5; // Гэрээний үлдэгдэлээс зөрүүтэй 3000
    const STAT_BANKPAYMENT_TRANS_VALUE = 6; // Гүйлгээний утга буруу
    const STAT_FAILED_BILL_INFO = 7; // bill- medeelel tatagdsangui
    const STAT_IMPOSSIBLE = 8; // Bolomjgui
    const STAT_REFUND = 9; // Butsaalt
    const STAT_SPLITED = 10; // huvaagdsan guilgee
    #
    const TYPE_MOBINET = 1;
    const TYPE_ULUSNET = 2;
    const TYPE_MOBINET_PREPAID = 3;
    const TYPE_CALL_PAYMENT = 4;
    const TYPE_TOPUP = 5;
    const TYPE_SAPC = 6;
    const TYPE_WIFI = 7;
    const TYPE_CANDY_QPAY = 8;
    const TYPE_CANDY_CASHIN = 9;
    const TYPE_CANDY_LOAN = 10;
    const TYPE_CANDY_AGENT = 11;

    /**
     * Returns an instance of this class.
     *
     * @return object BankpaymentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('Bankpayment');
    }

    /**
     * 
     * @param int $id
     * @param int $status
     * @return Bankpayment
     */
    public static function retrieveByPK($id)
    {
        $q = Doctrine_Query::create()
                ->from('Bankpayment')
                ->where('id = ?', $id);

        return $q->fetchOne();
    }

    /**
     * Төлөв
     * 
     * @return array
     */
    public static function getForSelectStatus()
    {
        $status = array(
            self::STAT_NEW => 'Шинэ хуулга',
            self::STAT_PROCESS => 'Төлөлт оруулж байна',
            self::STAT_SUCCESS => 'Амжилттай оруулсан',
            self::STAT_FAILED_CHARGE => 'Орсонгүй',
            self::STAT_BANKPAYMENT_AMOUNT => 'Гэрээний үлдэгдэл зөрүүтэй',
            self::STAT_BANKPAYMENT_TRANS_VALUE => 'Гүйлгээний утга буруу',
            self::STAT_FAILED_BILL_INFO => 'Биллийн мэдээлэл олдсонгүй',
            self::STAT_IMPOSSIBLE => 'Боломжгүй',
            self::STAT_REFUND => 'Буцаалт',
            self::STAT_SPLITED => 'Хуваагдсан гүйлгээ',
        );
        return $status;
    }

    /**
     * цэнэглэлтийн төрлүүд
     * 
     * @return array
     */
    public static function getForSelectUssdTypes()
    {
        $status = array(
            self::TYPE_TOPUP => 'Нэгж цэнэглэлт',
            self::TYPE_SAPC => 'Дата SAPC',
            self::TYPE_WIFI => 'Online WiFi Card',
        );
        return $status;
    }
    
    public static function getForSelectTypes()
    {
        $status = array(
            self::TYPE_CALL_PAYMENT => 'Яриа',
            self::TYPE_MOBINET => 'Мобинет',
            self::TYPE_MOBINET_PREPAID => 'Мобинет УТ',
        );
        return $status;
    }

    /**
     * Төлвийн нэр
     * 
     * @param int $v
     * @param boolean $img
     * @return string
     */
    public static function getStatusName($v, $img = false)
    {
        $v = (int) $v;

        $arr = self::getForSelectStatus();

        if (!isset($arr[$v])) {
            return '#';
        }

        if (!$img) {
            return $arr[$v];
        }

        $attr = 'title="' . $arr[$v] . '" alt="' . $arr[$v] . '"';

        switch ($v) {
            case self::STAT_NEW:
                return '<img src="/images/icons/info.png" ' . $attr . ' />';
            case self::STAT_PROCESS:
                return '<img src="/images/icons/process.png" ' . $attr . ' />';
            case self::STAT_SUCCESS:
                return '<img src="/images/icons/save.png" ' . $attr . ' />';
            case self::STAT_FAILED_CHARGE:
                return '<img src="/images/icons/error.png" ' . $attr . ' />';
            case self::STAT_BANKPAYMENT_AMOUNT:
                return '<img src="/images/icons/adjustment.png" ' . $attr . ' />';
            case self::STAT_BANKPAYMENT_TRANS_VALUE:
                return '<img src="/images/icons/adjustment_red.png" ' . $attr . ' />';
            case self::STAT_FAILED_BILL_INFO:
                return '<img src="/images/icons/errort.png" ' . $attr . ' />';
            case self::STAT_IMPOSSIBLE:
                return '<img src="/images/icons/warning.png" ' . $attr . ' />';
            default :
                return '#';
        }
    }

    /**
     * төлөлт оруулах гүйлгээнүүд
     * @param $type
     * @param null $useOrder
     * @param $limit
     * @return Doctrine_Collection
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function updateForCharge($type, $useOrder = null, $limit = 50)
    {
        // FOR UPDATE ажиллахын тулд AUTO COMMIT идэвхгүй байх ёстой
        $pdo = Doctrine_Manager::connection()->getDbh();
        $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);
        $pdo->beginTransaction();
        $ids = Doctrine_Query::create()
            ->select('id')
            ->from('Bankpayment')
            ->where('contract_number != ?', 0)
            ->andWhere('status = ?', self::STAT_NEW)
            ->andWhereIn('type', $type)
            ->andWhere('created_at <= ?', date('Y-m-d H:i:s', time() - 30))
            ->limit($limit)
            ->forUpdate(true)
            ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        if ($ids) {
            Doctrine_Query::create()
                ->update('Bankpayment')
                ->set('status', self::STAT_PROCESS)
                ->whereIn('id', $ids)
                ->execute();
            $pdo->commit();
            $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
            $qSelect = Doctrine_Query::create()
                ->from('Bankpayment')
                ->whereIn('id', $ids);
            if ($useOrder) {
                $qSelect->orderBy($useOrder);
            }
            return $qSelect->execute();
        } else {
            $pdo->commit();
            $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
            return null;
        }

    }
    
    /**
     * CX Төлөлт оруулах
     * @param null $bankpayment
     * @param $limit
     * @return bool
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function processPayment($bankpayment = null, $limit = 50)
    {
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/Payment.log'));
        $logger->log('============Started processPayment================', sfFileLogger::INFO);
        if ($bankpayment instanceof Bankpayment) {
            if ($bankpayment->canReCharge()) {
                $bankpayment->status = self::STAT_PROCESS;
                $bankpayment->save();
            } else {
                return FALSE;
            }
            $bankpaymentRows = array($bankpayment);
        } elseif ($bankpayment) {
            return FALSE;
        } else {
            $bankpaymentRows = self::updateForCharge(array(self::TYPE_MOBINET, self::TYPE_CALL_PAYMENT), null, $limit);
        }
        $logger->log('Total count: '.count($bankpaymentRows), sfFileLogger::INFO);
        echo 'processPayment count: '.count($bankpaymentRows);
        $count = 0;
        if(count($bankpaymentRows)>0){
        foreach ($bankpaymentRows as $bankpayment) {
            try {
                $count++;
                $logger->log($bankpayment->bank_order_id  . ' count: '.$count, sfFileLogger::INFO);
                $logger->log($bankpayment->bank_order_id . ' status1: '. $bankpayment->status, sfFileLogger::INFO);
                if (in_array($bankpayment->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED_BILL_INFO))) {
                    $bankpayment->status = self::STAT_PROCESS;
                    $bankpayment->save();
                }
                $logger->log($bankpayment->bank_order_id . ' status2: '. $bankpayment->status, sfFileLogger::INFO);
                $bankTransaction = BankpaymentTable::getBankTransaction($bankpayment['vendor_id'], $bankpayment['bank_order_id']);
                if ($bankTransaction) {
                    $paymentCode = BankpaymentTable::getPaymentCode($bankpayment['vendor_id'], $bankTransaction->getBankAccount());
                    if ($paymentCode) {
                        $pay = ($bankpayment['parent_id'] == 0) ? $bankTransaction['order_amount'] : $bankpayment['paid_amount'];
                        $payment = PostGateway::doPayment($bankpayment['number'], $bankpayment['contract_number'], $pay, $bankTransaction['order_date'], $paymentCode);
                        $logger->log($bankpayment->bank_order_id . ' $payment: '. print_r($payment, true), sfFileLogger::INFO);
                        if ($payment['Code'] === '0') {
                            $bankpayment->status = BankpaymentTable::STAT_SUCCESS;
                            if (!$bankpayment->username) {
                                $bankpayment->username = 'Bankpayment';
                            }
                            $bankpayment->status_comment = "Амжилттай";
                            try {
                                $isChild = intval($bankpayment['parent_id']) > 0;
                                TransactionTable::setAssignmentMain(PaymentTypeTable::getTypeByBillCycle($bankpayment['bill_cycle']), BankTable::getBankAndVendorMap($bankpayment['vendor_id']), $bankTransaction['bank_account'], $bankTransaction['order_id'], $bankTransaction['order_date'], $bankTransaction['order_p'], $bankTransaction['order_type'], $bankTransaction['order_amount'], $bankTransaction['order_s'], "BANKPAYMENT", $isChild, $isChild ? $bankpayment['paid_amount'] : 0);
                            } catch (Exception $exc) {
                                $isChild = intval($bankpayment['parent_id']) > 0;
                                TransactionTable::setAssignmentMain(PaymentTypeTable::getTypeByBillCycle($bankpayment['bill_cycle']), BankTable::getBankAndVendorMap($bankpayment['vendor_id']), $bankTransaction['bank_account'], $bankTransaction['order_id'], $bankTransaction['order_date'], $bankTransaction['order_p'], $bankTransaction['order_type'], $bankTransaction['order_amount'], $bankTransaction['order_s'], "BANKPAYMENT", $isChild, $isChild ? $bankpayment['paid_amount'] : 0);
                            }
                        } else {
                            $bankpayment->status = BankpaymentTable::STAT_FAILED_CHARGE;
                            $bankpayment->status_comment = "Амжилтгүй(" . $payment['Code'] . $payment['Info'] . ")";
                        }
                    } else {
                        $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                        $bankpayment->status_comment = "Амжилтгүй. Төлбөрийн код олдсонгүй(" . $paymentCode . ")";
                    }
                } else {
                    $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                    $bankpayment->status_comment = "Амжилтгүй. Банкны хуулга одсонгүй(vendor_id:" . $bankpayment['vendor_id'] . ",order_id:" . $bankpayment['bank_order_id'] . ")";
                }
                $logger->log($bankpayment->bank_order_id . ' $status: '.$bankpayment->status.'. $status_comment: '. $bankpayment->status_comment, sfFileLogger::INFO);
                $bankpayment->setTryCount($bankpayment->getTryCount() + 1);
                $bankpayment->save();
                unset($bankpayment);
            } catch (\Exception $ex) {
                $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                $bankpayment->status_comment = "Амжилтгүй, алдаа гарлаа.)";
                $bankpayment->setTryCount($bankpayment->getTryCount() + 1);
                $bankpayment->save();
                $logger->log($bankpayment->bank_order_id . ' Error: '. $ex, sfFileLogger::ERR);
            }
        }
        }
    }

    /**
     * Гүйлгээний утгаас гэрээний дугаар хайх
     * 
     * @param array $transValue
     * @return Bankpayment|null
     */
    public static function findContractNumber($transValue)
    {
        $numbers = array();
        $matches = array();
        # mobile bankaar shiljuulsen dugaariig avch hayah
        $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $transValue);
        preg_match_all("/[1234][0-9]{7}/", $txnDesc, $matches);
        foreach ($matches as $numberArr) {
            foreach ($numberArr as $number) {
                $numbers[] = trim($number);
            }
            break;
        }
        return $numbers;
    }

    /**
     * Гүйлгээний утгаас дугаар хайх
     * 
     * @param array $transValue
     * @return Bankpayment|null
     */
    public static function findPhoneNumber($transValue, $type)
    {
        $number = 0;
        $matches = array();
        # mobile bankaar shiljuulsen dugaariig avch hayah
        $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $transValue);
        switch ($type) {
            case self::TYPE_MOBINET:
                preg_match_all("/([7][75][0-9]{6})|(591[0-9]{5})/", $txnDesc, $matches);
                break;
            case self::TYPE_CALL_PAYMENT:
                preg_match_all("/([9][954][0-9]{6})|(85[0-9]{6})/", $txnDesc, $matches);
                break;
            case self::TYPE_ULUSNET:
                preg_match_all("/(633[0-9]{5})/", $txnDesc, $matches);
                break;
            default:
                break;
        }
        foreach ($matches as $numberArr) {
            foreach ($numberArr as $number) {
                $number = trim($number);
                continue;
            }
            break;
        }
        return $number;
    }

    /**
     * Гүйлгээний утгаас HBB prepaid гэрээний дугаар хайх
     * 
     * @param array $transValue
     * @return Bankpayment|null
     */
    public static function findHbbContract($transValue)
    {
        $numbers = array();
        $matches = array();
        $txnDesc = preg_replace("/\([0-9]{8}\)/", "", strtoupper($transValue));
        $txnDesc = preg_replace("/[9875][0-9]{7}/", "", $txnDesc);
//        $txnDesc = preg_replace("/\s/", "", $txnDesc);
        preg_match("/((\bBGN\b)|(\bDOR\b)|(\bHI3\b)|(\bHI4\b)|(\bHI5\b)|(\bHT\b)|(\bSHG\b)|(\bSOHO\b)|(\bHBB\b)|(\bUX\b))-[0-9]{3,6}/", $txnDesc, $matches);
        if (isset($matches[0])) {
            return $matches[0];
        }
        return false;
    }

    /**
     * Гүйлгээний утгаас HBB prepaid username-р хайх
     * 
     * @param array $transValue
     * @return Bankpayment|null
     */
    public static function findHbbUsername($transValue)
    {
        $numbers = array();
        $matches = array();
        $txnDesc = preg_replace("/\([0-9]{8}\)/", "", strtoupper($transValue));
        // $txnDesc = preg_replace("/\s/", "", $txnDesc);
        preg_match("/[A-Z0-9_]{3,12}/", $txnDesc, $matches);
        if (isset($matches[0])) {
            return $matches[0];
        }
        return false;
    }

    /**
     * 
     * @param array $trans
     * @return Bankpayment|null
     */
    public static function insert($trans)
    {
        try {
            $bankPayment = new Bankpayment();
            $bankPayment->username = isset($trans['username']) ? $trans['username'] : 0;
            $bankPayment->parent_id = (int) isset($trans['parent_id']) ? $trans['parent_id'] : 0;
            $bankPayment->child_num = (int) isset($trans['child_num']) ? $trans['child_num'] : 0;
            $bankPayment->vendor_id = $trans['vendor_id'];
            $bankPayment->type = $trans['type'];
            $bankPayment->bank_order_id = $trans['bank_order_id'];
            $bankPayment->bank_payment_code = isset($trans['bank_payment_code']) ? $trans['bank_payment_code'] : 0;
            $bankPayment->status = $trans['status'];
            $bankPayment->status_comment = isset($trans['status_comment']) ?  substr($trans['status_comment'], 0, 50) : '';
            $bankPayment->number = $trans['number'];
            $bankPayment->contract_number = $trans['contract_number'];
            $bankPayment->contract_name = isset($trans['contract_name']) ? $trans['contract_name'] : 0;
            $bankPayment->bill_cycle = isset($trans['bill_cycle']) ? $trans['bill_cycle'] : 0;
            $bankPayment->paid_amount = isset($trans['paid_amount']) ? $trans['paid_amount'] : $trans['contract_amount'];
            $bankPayment->contract_amount = isset($trans['contract_amount']) ? $trans['contract_amount'] : 0;
            $bankPayment->credit_control = isset($trans['credit_control']) ? $trans['credit_control'] : 0;
            $bankPayment->insurance_date = isset($trans['insurance_date']) ? $trans['insurance_date'] : date("Y-m-d", 0);
            $bankPayment->insurance_amount = isset($trans['insurance_amount']) ? $trans['insurance_amount'] : '0';
            if (isset($trans['username'])&& $trans['username']) {
                $bankPayment->username = isset($trans['username']) ? $trans['username'] : '';
            }
            $bankPayment->updated_user_id = isset($trans['updated_user_id']) ? $trans['updated_user_id'] : '0';
            $bankPayment->created_at = date('Y-m-d H:i:s');
            $bankPayment->save();
            return $bankPayment;
        } catch (Exception $exc) {
            $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/bankpayment.log'));
            $logger->log("error on bankpayment insert: " . $exc->getMessage().', bank_order_id: '.$trans['bank_order_id'], sfFileLogger::ERR);
        }
    }

    /**
     * List
     * @param array $trans
     * @return Bankpayment|null
     */
    public static function getList($dateType, $dateFrom, $dateTo, $type, $bank = 0, $keyword = 0, $status = 0, $staff = null, $search = null, $sidx = 'id', $sord = 'asc')
    {
        $pdo = Doctrine_Manager::connection()->getDbh();
        $tableAdd = $selectAdd = '';
        $where = array("v.status = 1");
        $whereSub = array("1=1");

        #validate date interval
        $daysDiff = AppTools::getDays($dateFrom, $dateTo);
        if ($daysDiff >= 31) {
            sfContext::getInstance()->getUser()->setFlash('warning', 'Та 31 хонгоос илүүтэйгээр шүүх боломжгүй');
            return array();
        }
        if ($type) {
            if (is_array($type)) {
                $where[] = "b.type IN (" . implode(',', $type) . ")";
            } else {
                $where[] = " b.type=$type ";
            }
        }
        if ($bank) {
            if (is_array($bank)) {
                $where[] = "b.vendor_id IN (" . implode(',', $bank) . ")";
                $whereSub[] = "bank.vendor_id IN (" . implode(',', $bank) . ")";
            } else {
                $where[] = "b.vendor_id =$bank";
                $whereSub[] = "bank.vendor_id =$bank";
            }
        }
        if ($staff) {
            $where[] = "b.username ='$staff'";
//            $whereSub[] = "bank.username ='$staff'";
        }

        if ($search) {
            foreach ($search as $index => $value) {
                $where[] = " $index='$value' ";
            }
        }
        if ($type == self::TYPE_MOBINET_PREPAID) {
            $tableAdd = "INNER JOIN bankpayment_mobinet mobinet ON b.id = mobinet.bankpayment_id ";
            $selectAdd = "mobinet.bundle_name,mobinet.speed,mobinet.extent_month,";
        }

// mandatory
        $subDate = TRUE;
        switch ($dateType) {
            case 1:
                $ognoo = "bank.created_at";
                break;
            case 2:
                $ognoo = "bank.order_date";
                break;
            case 3:
                $subDate = FALSE;
                $ognoo = "b.updated_at";
                break;
            default:
                $ognoo = "bank.created_at";
                break;
        }
        if ($subDate) {
            $whereSub[] = "$ognoo >='$dateFrom 00:00:00'";
            $whereSub[] = "$ognoo <='$dateTo 23:59:59'";
        } else {
            $where[] = "$ognoo >='$dateFrom 00:00:00'";
            $where[] = "$ognoo <='$dateTo 23:59:59'";
        }
        $whereSub[] = "bank.order_type IN('ADD','income','C','1')";
// optional
        if ($status) {
            if (is_array($status)) {
                $whereTwo = "WHERE t1.status IN(" . implode(',', $status) . ")";
            } else {
                $whereTwo = "WHERE t1.status =$status";
            }
        }

        if ($keyword) {
            $whereOr = array();
            $whereOr[] = "b.number like '%$keyword%'";
            $whereOr[] = "b.contract_number like '%$keyword%'";
            $whereOr[] = "bank1.bank_account like '%$keyword%'";
            $whereOr[] = "bank1.order_p like '%$keyword%'";
            $whereOr[] = "bank1.order_amount like '%$keyword%'";
            $where[] = "(" . implode(' OR ', $whereOr) . ")";
            $whereOr = array();
            $whereOr[] = "bank.bank_account like '%$keyword%'";
            $whereOr[] = "bank.order_p like '%$keyword%'";
            $whereOr[] = "bank.order_amount like '%$keyword%'";
            $whereSub[] = "(" . implode(' OR ', $whereOr) . ")";
        }
        $where = implode(' AND ', $where);
        $whereSub = implode(' AND ', $whereSub);

        $query = "SELECT * FROM (SELECT DISTINCT $selectAdd 
                        b.id,
                        b.parent_id,
                        if(b.parent_id = 0, b.id,b.parent_id) as parent,
                        v.name as bank_name,
                        b.status,
                        b.status_comment,
                        b.try_count,
                        bank1.created_at,
                        bank1.order_id,
                        bank1.bank_account,
                        bank1.order_date,
                        bank1.order_p,
                        if(b.parent_id = 0, bank1.order_amount,b.paid_amount) as order_amount,
                        b.number,
                        b.contract_number,
                        b.`contract_name`,
                        b.`bill_cycle`,
                        b.`contract_amount`,
                        b.`credit_control`,
                        b.`insurance_date`,
                        b.`insurance_amount`,
                        b.`updated_at`,
                        b.`username`, 
                        if(b.parent_id = 0, 'N','Y') as copy_inv,
                        CASE WHEN ref.id IS NULL THEN 'NO_REFUND' ELSE ref.refund_type END AS pay_type
                FROM `bankpayment` b INNER JOIN
                (
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_capitron bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_capital bank where $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_tdb bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_xac bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_savings bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_golomt bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_khaan bank WHERE $whereSub 
                ) bank1 ON bank1.id=b.bank_order_id AND b.vendor_id=bank1.vendor_id
                INNER JOIN vendor v ON v.id=b.vendor_id $tableAdd 
                LEFT OUTER JOIN bankpayment_vat_refund ref ON b.id = ref.bankpayment_id AND ref.type <> 'EDIT'
            WHERE " . $where .  ") t1 " . $whereTwo;
        $query .= " ORDER BY t1.created_at DESC";
//        echo $query;        die();
        $rows = $pdo->query($query)->fetchAll(PDO::FETCH_ASSOC);
        return $rows;
    }

    /**
     * Банкны хуулга олох
     * @param integer $bank
     * @param integer $bankOderId
     * @return Bankpayment|null
     */
    public static function getBankTransaction($bank, $bankOderId)
    {
        switch ($bank) {
            case VendorTable::BANK_KHAAN:
                $bank = BankKhaanTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::BANK_SAVINGS:
                $bank = BankSavingsTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::BANK_TDB:
                $bank = BankTdbTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::GOLOMT:
                $bank = BankGolomtTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::BANK_XAC:
                $bank = BankXacTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::BANK_CAPITAL:
                $bank = BankCapitalTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::BANK_CAPITRON:
                $bank = BankCapitronTable::retrieveByPK($bankOderId);
                break;
            case VendorTable::CANDY:
                $bank = BankCandyTable::retrieveByPK($bankOderId);
                break;
            default:
                $bank = null;
                break;
        }
        return $bank;
    }

    /**
     * CX төлбөрийн код авах
     * @param integer $bankOderId
     * @return Bankpayment|null
     */
    public static function getPaymentCode($bank, $account)
    {
        switch ($bank) {
            case VendorTable::BANK_KHAAN:
                $code = BankKhaanAccountTable::getPaymentCode($account);
                break;
            case VendorTable::BANK_SAVINGS:
                $code = BankSavingsAccountTable::getPaymentCode($account);
                break;
            case VendorTable::GOLOMT:
                $code = BankGolomtTable::getPaymentCode($account);
                break;
            case VendorTable::BANK_XAC:
                $code = BankXacAccountTable::getPaymentCode($account);
                break;
            case VendorTable::BANK_TDB:
                $code = BankTdbTable::getPaymentCode($account);
                break;
            case VendorTable::BANK_CAPITAL:
                $code = BankCapitalAccountTable::getPaymentCode($account);
                break;
            case VendorTable::BANK_CAPITRON:
                $code = BankCapitronAccountTable::getPaymentCode($account);
                break;
            default:
                $code = null;
                break;
        }
        if (!$code) {
            $bankAccount = BankAccountTable::getByAccount($account);
            $code = $bankAccount['bank_code'];
        }
        return $code;
    }

    /**
     * Хүүхдийн тоо авах
     * @param integer $bankpaymentId
     * @return Chlid count | null
     */
    public static function getChildCount($bankpaymentId)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();

        $query = "
            SELECT count(*) as too   
FROM `bankpayment` b 
WHERE parent_id=$bankpaymentId";
//        echo $query;        die();
        $rows = $pdo->query($query)->fetch();
        return $rows['too'];
    }

    /**
     * ULUSNET Төлөлт оруулах
     * @param null $bankpayment
     * @param $limit
     * @return bool
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function processPaymentUlusnet($bankpayment = null, $limit = 50)
    {
        if ($bankpayment instanceof Bankpayment) {
            if ($bankpayment->canReCharge()) {
                $bankpayment->status = self::STAT_PROCESS;
                $bankpayment->save();
            } else {
                return FALSE;
            }
            $bankpaymentRows = array($bankpayment);
        } elseif ($bankpayment) {
            return FALSE;
        } else {
            $bankpaymentRows = self::updateForCharge(array(self::TYPE_ULUSNET), null, $limit);
        }
        foreach ($bankpaymentRows as $bankpayment) {
            try {
                if (in_array($bankpayment->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED_BILL_INFO))) {
                    $bankpayment->status = self::STAT_PROCESS;
                    $bankpayment->save();
                }
                $bankTransaction = BankpaymentTable::getBankTransaction($bankpayment['vendor_id'], $bankpayment['bank_order_id']);
                if ($bankTransaction) {
                    $pay = ($bankpayment['parent_id'] == 0) ? $bankTransaction['order_amount'] : $bankpayment['paid_amount'];
                    $product = BankpaymentProductTable::findByPrice($pay);
                    if ($product) {
                        $payment = UlusnetGateway::chargePayment($bankpayment['number'], $product['code'], self::getPaymentUserId($bankpayment['vendor_id']));
                        if ($payment['Code'] === "0") {
                            $bankpayment->status = BankpaymentTable::STAT_SUCCESS;
                            $bankpayment->status_comment = "Амжилттай";
                            try {
                                $isChild = intval($bankpayment['parent_id']) > 0;
                                TransactionTable::setAssignmentMain(PaymentTypeTable::PAYMENT_ULUSNET_CHARGE, BankTable::getBankAndVendorMap($bankpayment['vendor_id']), $bankTransaction['bank_account'], $bankTransaction['order_id'], $bankTransaction['order_date'], $bankTransaction['order_p'], $bankTransaction['order_type'], $bankTransaction['order_amount'], $bankTransaction['order_s'], "BANKPAYMENT", $isChild, $isChild ? $bankpayment['paid_amount'] : 0);
                            } catch (Exception $exc) {

                            }
                        } else {
                            $bankpayment->status = BankpaymentTable::STAT_FAILED_CHARGE;
                            $bankpayment->status_comment = "Амжилтгүй(" . $payment['Code'] . $payment['Info'] . ")";
                        }
                    } else {
                        $bankpayment->status = BankpaymentTable::STAT_BANKPAYMENT_AMOUNT;
                        $bankpayment->status_comment = "Амжилтгүй. Үнийн дүн буруу (vendor_id:" . $bankpayment['vendor_id'] . ",order_id:" . $bankpayment['bank_order_id'] . ")";
                    }
                } else {
                    $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                    $bankpayment->status_comment = "Амжилтгүй. Банкны хуулга одсонгүй(vendor_id:" . $bankpayment['vendor_id'] . ",order_id:" . $bankpayment['bank_order_id'] . ")";
                }
                $bankpayment->setTryCount($bankpayment->getTryCount() + 1);
                $bankpayment->save();

                unset($bankpayment);
            } catch (\Exception $ex) {
                $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                $bankpayment->status_comment = "Амжилтгүй, алдаа гарлаа.)";
                $bankpayment->setTryCount($bankpayment->getTryCount() + 1);
                $bankpayment->save();
            }
        }
    }

    /**
     * Төлөлт оруулсан ажилтны дугаар авах
     * @param integer $bank
     * @return User id | 0
     */
    public static function getPaymentUserId($bank, $bankAccount = null)
    {
        switch ($bank) {
            case VendorTable::BANK_KHAAN:
                $userId = HrmCore::BOT_USER_KHAAN;
                break;
            case VendorTable::BANK_SAVINGS:
                $userId = HrmCore::BOT_USER;
                break;
            case VendorTable::GOLOMT:
                $userId = HrmCore::BOT_USER_GOLOMT;
                break;
            case VendorTable::BANK_XAC:
                $userId = HrmCore::BOT_USER_XAC;
                break;
            case VendorTable::BANK_TDB:
                $userId = HrmCore::BOT_USER_TDB;
                break;
            case VendorTable::BANK_CAPITRON:
                $userId = HrmCore::BOT_USER_CAPITRON;
                break;
            case VendorTable::BANK_CAPITAL:
                $userId = HrmCore::BOT_USER_CAPITAL;
                break;
            default:
                $userId = 0;
                break;
        }
        if ($bankAccount) {
            $userId .= substr($bankAccount . "", -1);
        }
        return $userId;
    }

    /**
     * MOBINET TASK Төлөлт оруулах
     * @param null $bankpaymentObject
     * @param $limit
     * @return bool
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function processPaymentMobinet($bankpaymentObject = null, $limit = 50)
    {
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/processPaymentMobinet.log'));
        $logger->log('============Started processPaymentMobinet================', sfFileLogger::INFO);
        if ($bankpaymentObject instanceof Bankpayment) {
            if ($bankpaymentObject->canReCharge()) {
                $bankpaymentObject->status = self::STAT_PROCESS;
                $bankpaymentObject->save();
            } else {
                return FALSE;
            }
            $bankpaymentRows = array($bankpaymentObject);
        } elseif ($bankpaymentObject) {
            return FALSE;
        } else {
            $bankpaymentRows = self::updateForCharge(array(self::TYPE_MOBINET_PREPAID), null, $limit);
        }
        $logger->log('Total count: '.count($bankpaymentRows), sfFileLogger::INFO);
        echo 'processPaymentMobinet count: '.count($bankpaymentRows);
        $count = 0;
        if(count($bankpaymentRows)>0){
        foreach ($bankpaymentRows as $bankpayment) {
            try {
                $count++;
                if (in_array($bankpayment->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED_BILL_INFO))) {
                    $bankpayment->status = self::STAT_PROCESS;
                    $bankpayment->save();
                }
                $bankTransaction = BankpaymentTable::getBankTransaction($bankpayment['vendor_id'], $bankpayment['bank_order_id']);
                if ($bankTransaction) {
                    $pay = ($bankpayment['parent_id'] == 0) ? $bankTransaction['order_amount'] : $bankpayment['paid_amount'];
                    $contract = $bankpayment['contract_number'];
                    $bankAccount = $bankTransaction->getBankAccount();
                    $bankMobinet = BankAccountTable::getByAccount($bankAccount);
                    $paymentCode = $bankMobinet->getBankCode();                    
                    $bankName = VendorTable::getNameById($bankpayment['vendor_id']);
                    $isdn = $bankpayment['number'];
                    $productCode = PaymentTypeTable::PAYMENT_HOMENET;
                    $result = MobinetGateway::doPayment($contract, $pay, $bankMobinet->mobinet_id);
                    $logger->log($bankpayment['bank_order_id'] .'MobinetGateway::doPayment:$result: '. print_r($result, true), sfFileLogger::INFO);
                    if ($result['res']) {
                        $bankpayment->status = BankpaymentTable::STAT_SUCCESS;
                        $bankpayment->status_comment = "Амжилттай";
                        try {
                            $isChild = intval($bankpayment['parent_id']) > 0;
                            TransactionTable::setAssignmentMain(PaymentTypeTable::PAYMENT_HOMENET, BankTable::getBankAndVendorMap($bankpayment['vendor_id']), $bankTransaction['bank_account'], $bankTransaction['order_id'], $bankTransaction['order_date'], $bankTransaction['order_p'], $bankTransaction['order_type'], $bankTransaction['order_amount'], $bankTransaction['order_s'], "BANKPAYMENT", $isChild, $isChild ? $bankpayment['paid_amount'] : 0);
                            // send VAT
                            $accountInfo = MobinetGateway::contractInfo($contract);
                            $emails = explode(",", $accountInfo['email']);
                            $emailsSize = sizeof(explode(",", $accountInfo['email']));
                            if (isset($accountInfo['mobile']) && $accountInfo['mobile']) {
                                $mobiles = explode(",", $accountInfo['mobile']);
                                $mobilesSize = sizeof(explode(",", $accountInfo['mobile']));
                                if ($mobilesSize == 1) {
                                    if (isset($accountInfo['email']) && $accountInfo['email']) {
                                        if ($emailsSize == 1) {
                                            BasicVatSenderNew::createAndSendVat($mobiles[0], $contract, $pay, $bankAccount, $paymentCode, $bankName, $contract, $productCode, $emails[0], 'mobinet');
                                        } else {
                                            BasicVatSenderNew::createAndSendVat($mobiles[0], $contract, $pay, $bankAccount, $paymentCode, $bankName, $contract, $productCode, null, 'mobinet');
                                        }
                                    } else {
                                        BasicVatSenderNew::createAndSendVat($mobiles[0], $contract, $pay, $bankAccount, $paymentCode, $bankName, $contract, $productCode, null, 'mobinet');
                                    }
                                } elseif (isset($accountInfo['email']) && $accountInfo['email']) {
                                    if ($emailsSize == 1) {
                                        BasicVatSenderNew::createAndSendVat(null, $contract, $pay, $bankAccount, $paymentCode, $bankName, $contract, $productCode, $emails[0], 'mobinet');
                                    }
                                }
                            } elseif (isset($accountInfo['email']) && $accountInfo['email']) {
                                if ($emailsSize == 1) {
                                    BasicVatSenderNew::createAndSendVat(null, $contract, $pay, $bankAccount, $paymentCode, $bankName, $contract, $productCode, $emails[0], 'mobinet');
                                }
                            }
                        } catch (Exception $exc) {
                            $logger->log($bankpayment['bank_order_id'] .' Error on sendVat: '. $exc, sfFileLogger::ERR);
                        }
                    } else {
                        $bankpayment->status = BankpaymentTable::STAT_FAILED_CHARGE;
                        $bankpayment->status_comment = "Амжилтгүй(" . $result['info'] . ")";
                    }
                } else {
                    $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                    $bankpayment->status_comment = "Амжилтгүй. Банкны хуулга одсонгүй(vendor_id:" . $bankpayment['vendor_id'] . ",order_id:" . $bankpayment['bank_order_id'] . ")";
                }
                $bankpayment->setTryCount($bankpayment->getTryCount() + 1);
                $bankpayment->save();
                $logger->log($bankpayment['bank_order_id'] .'$status: '. $bankpayment->status.', $status_comment: '. $bankpayment->status_comment, sfFileLogger::INFO);
                unset($bankpayment);
            } catch (\Exception $ex) {
                $bankpayment->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                $bankpayment->status_comment = "Амжилтгүй, алдаа гарлаа.)";
                $bankpayment->setTryCount($bankpayment->getTryCount() + 1);
                $bankpayment->save();
                $logger->log($bankpayment['bank_order_id'] .'$status: '. $bankpayment->status.', $status_comment: '. $bankpayment->status_comment, sfFileLogger::INFO);
                $logger->log($bankpayment['bank_order_id'] .', Error: '. $ex, sfFileLogger::ERR);
            }
        }
        }
        $logger->log('============Ended processPaymentMobinet================', sfFileLogger::INFO);
    }

    /**
     * Дахин дуудсан ажилтан авах
     * @param integer $bankpaymentId
     * @return Child count | null
     */
    public static function getForSelectStaff($type)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();
        $query = "SELECT username FROM `bankpayment` b WHERE b.type='$type' AND username != '' AND username IS NOT NULL GROUP BY type, username ";
        $rows = $pdo->query($query)->fetchAll(PDO::FETCH_ASSOC);
        $result = array();
        if(count($rows)> 0){
            foreach ($rows as $row) {
                $result[$row['username']] = $row['username'];
            }
        }
        return $result;
    }

    /**
     * Амжилтгүй төлвүүд
     * @return Array
     */
    public static function getStatusFailed()
    {
        return array(self::STAT_FAILED_CHARGE, self::STAT_BANKPAYMENT_AMOUNT, self::STAT_BANKPAYMENT_TRANS_VALUE, self::STAT_FAILED_BILL_INFO);
    }

    /**
     * Банкаар төлсөн төлбөрийг Vat damjuulah
     * @param null $bankpaymentVat
     * @param $limit
     * @return bool
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function processVatNopayer($bankpayment = null, $limit = 50)
    {
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/VatNopayer.log'));
        $logger->log('============Started processVatNopayer================', sfFileLogger::INFO);
        if ($bankpayment instanceof Bankpayment) {
            if ($bankpayment->canReVat()) {
                $bankpayment->status = self::STAT_NEW;
                $bankpayment->save();
            } else {
                return FALSE;
            }
            $bankpaymentVat = BankpaymentVatTable::getInstance()->findBy('bankpayment_id', $bankpayment->id);
            $rows = array($bankpaymentVat);
        } elseif ($bankpayment) {
            return FALSE;
        } else {
            $rows = BankpaymentVatTable::updateForCharge($limit);
        }
        $logger->log('Total count: '.count($rows), sfFileLogger::INFO);
        echo 'processVatNopayer count: '.count($rows);
        $count = 0;
        if(count($rows)>0){
            foreach ($rows as $bankpayment) {
                try {
                    $count++;
                    $bankpaymentVat = BankpaymentVatTable::retrieveByPK($bankpayment['id']);
                    $bankTransaction = BankpaymentTable::getBankTransaction($bankpayment['vendor_id'], $bankpayment['bank_order_id']);
                    $logger->log( $bankpayment['bank_order_id'].', $bankpaymentVat: '.print_r($bankpaymentVat->toArray(), true), sfFileLogger::INFO);
                    $logger->log( $bankpayment['bank_order_id'].', $bankTransaction: '.print_r($bankTransaction->toArray(), true), sfFileLogger::INFO);
                    if ($bankTransaction) {
                        $productId = BaseSms::getProductIdByCycle($bankpayment['bill_cycle']);
                        $outcomeUserId = BaseSms::CUSTOMER_CORPORATE;
                        $outcomeGroupId = BaseSms::GROUP_CUSTOMER;
                        $contract = $bankpayment['contract_number'];
                        if ($productId) {
                            if ($bankpayment['parent_id']) {
                                $pay = $bankpayment['paid_amount'];
                            } else {
                                $pay = $bankTransaction['order_amount'];
                            }
                            $result = BaseSms::insertNoVatpayerApi($bankpayment['vendor_id'], $productId, $contract, $pay, 1, $outcomeUserId, $outcomeGroupId);
                            $logger->log( $bankpayment['bank_order_id'].', BaseSms::insertNoVatpayerApi:$result: '.print_r($result, true), sfFileLogger::INFO);
                            $bankpaymentVat->status = BankpaymentVatTable::STAT_SUCCESS;
                        } else {
                            $bankpaymentVat->status = BankpaymentVatTable::STAT_FAILED;
                        }
                        if ($result) {
                            $bankpaymentVat->setOutcomeOrderId($result);
                            $logger->log( $bankpayment['bank_order_id'].', BaseSms::insertNoVatpayerApi:$result: '.print_r($result, true), sfFileLogger::INFO);
                        }
                    } else {
                        $bankpaymentVat->status = BankpaymentVatTable::STAT_FAILED;
                    }
                    $bankpaymentVat->save();
                    unset($bankpaymentVat);
                    unset($bankpayment);
                } catch (Exception $ex) {
                    //log later
                    $logger->log('-catch--=' . $ex->getMessage(), sfFileLogger::ERR);
                }
            }
        }
    }
    public static function processVatNopayerOld($bankpayment = null, $limit = 50)
    {
        if ($bankpayment instanceof Bankpayment) {
            if ($bankpayment->canReVat()) {
                $bankpayment->status = self::STAT_NEW;
                $bankpayment->save();
            } else {
                return FALSE;
            }
            $bankpaymentVat = BankpaymentVatTable::getInstance()->findBy('bankpayment_id', $bankpayment->id);
            $rows = array($bankpaymentVat);
        } elseif ($bankpayment) {
            return FALSE;
        } else {
            $rows = BankpaymentVatTable::updateForCharge($limit);
        }
        foreach ($rows as $bankpayment) {
            try {
                $bankpaymentVat = BankpaymentVatTable::retrieveByPK($bankpayment['id']);
                $bankTransaction = BankpaymentTable::getBankTransaction($bankpayment['vendor_id'], $bankpayment['bank_order_id']);
                if ($bankTransaction) {
                    $productId = BaseSms::getProductIdByCycle($bankpayment['bill_cycle']);
                    $outcomeUserId = BaseSms::CUSTOMER_CORPORATE;
                    $outcomeGroupId = BaseSms::GROUP_CUSTOMER;
                    $contract = $bankpayment['contract_number'];
                    if ($productId) {
                        if ($bankpayment['parent_id']) {
                            $pay = $bankpayment['paid_amount'];
                        } else {
                            $pay = $bankTransaction['order_amount'];
                        }
                        $result = BaseSms::insertNoVatpayerApi($bankpayment['vendor_id'], $productId, $contract, $pay, 1, $outcomeUserId, $outcomeGroupId);
                        $bankpaymentVat->status = BankpaymentVatTable::STAT_SUCCESS;
                    } else {
                        $bankpaymentVat->status = BankpaymentVatTable::STAT_FAILED;
                    }
                    if ($result) {
                        $bankpaymentVat->setOutcomeOrderId($result);
                    }
                } else {
                    $bankpaymentVat->status = BankpaymentVatTable::STAT_FAILED;
                }
                $bankpaymentVat->save();
                unset($bankpaymentVat);
                unset($bankpayment);
            } catch (Exception $ex) {
                //log later
            }
        }
    }

    /**
     * Статус солих (Төлөлт болгох)
     */
    public static function updateStatus($id, $status, $status_comment, $userId = null, $userName = null)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();
        $updateUserId = '';
        if ($userId) {
            $updateUserId = ", updated_user_id = " . $userId;
        }
        $updateUserName = '';
        if ($userName) {
            $updateUserName = ", username = '" . $userName . "'";
        }
        $sql = "UPDATE bankgw.bankpayment
              SET status = '" . $status . "', status_comment = '" . $status_comment . "'" . $updateUserId . $updateUserName . "
              WHERE id = '" . $id . "'
              LIMIT 1";
        $affectedRows = $pdo->exec($sql);
        $result = 0;
        if ($affectedRows == 0) {
            $result = 1;
        }
        return $result;
    }

    public static function getBankTran($bankName, $orderId, $orderType, $orderAmount, $orderDate)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();
        $query = "SELECT * FROM bankgw." . $bankName . " WHERE order_id = " . $orderId . " AND order_type = '" . $orderType . "' AND order_amount = " . $orderAmount . " AND order_date = '" . $orderDate . "' LIMIT 1";
        $rows = $pdo->query($query)->fetchAll(PDO::FETCH_ASSOC);
        return $rows[0];
    }

    public static function retrieveByBankOrderId($bankOrderId, $vendorId = 0)
    {
        $q = Doctrine_Query::create()
                ->from('Bankpayment')
                ->where('bank_order_id = ?', $bankOrderId);
        if ($vendorId) {
            $q->andWhere('vendor_id = ?', $vendorId);
        }

        return $q->fetchOne();
    }

    public static function getPaymentList($dateType, $dateFrom, $dateTo, $type, $bank = 0, $keyword = null, $status = 0, $staff = null, $account = null)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();
        $tableAdd = $selectAdd = '';
        $where = array("1=1");
        $whereSub = array("1=1");

        #validate date interval
        $daysDiff = AppTools::getDays($dateFrom, $dateTo);
        if ($daysDiff >= 31) {
            sfContext::getInstance()->getUser()->setFlash('warning', 'Та 31 хонгоос илүүтэйгээр шүүх боломжгүй');
            return array();
        }

// mandatory
        $subDate = TRUE;
        switch ($dateType) {
            case 1:
                $ognoo = "bank.created_at";
                break;
            case 2:
                $ognoo = "bank.order_date";
                break;
            case 3:
                $subDate = FALSE;
                $ognoo = "b.updated_at";
                break;
            default:
                $ognoo = "bank.created_at";
                break;
        }
        if ($subDate) {
            $whereSub[] = "$ognoo >='$dateFrom 00:00:00'";
            $whereSub[] = "$ognoo <='$dateTo 23:59:59'";
        } else {
            $where[] = "$ognoo >='$dateFrom 00:00:00'";
            $where[] = "$ognoo <='$dateTo 23:59:59'";
        }

        if ($type) {
            if (is_array($type)) {
                $where[] = "b.type IN (" . implode(',', $type) . ")";
            } else {
                $where[] = " b.type=$type ";
            }
        }
        if ($bank) {
            if (is_array($bank)) {
                $where[] = "b.vendor_id IN (" . implode(',', $bank) . ")";
                $whereSub[] = "bank.vendor_id IN (" . implode(',', $bank) . ")";
            } else {
                $where[] = "b.vendor_id =$bank";
                $whereSub[] = "bank.vendor_id =$bank";
            }
        }
        if ($staff) {
            $where[] = "b.username ='$staff'";
//            $whereSub[] = "bank.username ='$staff'";
        }

        if ($search) {
            foreach ($search as $index => $value) {
                $where[] = " $index='$value' ";
            }
        }
        if ($type == self::TYPE_MOBINET_PREPAID) {
            $tableAdd = "INNER JOIN bankpayment_mobinet mobinet ON b.id = mobinet.bankpayment_id ";
            $selectAdd = "mobinet.bundle_name,mobinet.speed,mobinet.extent_month,";
        }

        $whereSub[] = "bank.order_type IN('ADD','income','C','1')";
// optional
        if ($status) {
            if (is_array($status)) {
                $whereTwo = " WHERE t1.status IN(" . implode(',', $status) . ")";
            } else {
                $whereTwo = " WHERE t1.status =$status";
            }
        }

        if ($account) {
            $whereSub[] = "bank.bank_account = '$account'";
        }

        if ($keyword) {
            $whereOr = array();
            $whereOr[] = "b.number like '%$keyword%'";
            $whereOr[] = "b.contract_number like '%$keyword%'";
            $whereOr[] = "bank1.bank_account like '%$keyword%'";
            $whereOr[] = "bank1.order_p like '%$keyword%'";
            $whereOr[] = "bank1.order_amount like '%$keyword%'";
            $where[] = "(" . implode(' OR ', $whereOr) . ")";
            $whereOr = array();
            $whereOr[] = "bank.bank_account like '%$keyword%'";
            $whereOr[] = "bank.order_p like '%$keyword%'";
            $whereOr[] = "bank.order_amount like '%$keyword%'";
            $whereSub[] = "(" . implode(' OR ', $whereOr) . ")";
        }
        $where = implode(' AND ', $where);
        $whereSub = implode(' AND ', $whereSub);

        $query = "SELECT * FROM( SELECT DISTINCT $selectAdd 
                        b.id,
                        b.parent_id,
                        if(b.parent_id = 0, b.id,b.parent_id) as parent,
                        v.name as bank_name,
                        b.status,
                        b.status_comment,
                        b.try_count,
                        bank1.created_at,
                        bank1.order_id,
                        bank1.bank_account,
                        bank1.order_date,
                        bank1.order_p,
                        if(b.parent_id = 0, bank1.order_amount,b.paid_amount) as order_amount,
                        b.number,
                        b.contract_number,
                        b.`contract_name`,
                        b.`bill_cycle`,
                        b.`contract_amount`,
                        b.`credit_control`,
                        b.`insurance_date`,
                        b.`insurance_amount`,
                        b.`updated_at`,
                        b.`username`, 
                        if(b.parent_id = 0, 'N','Y') as copy_inv,
                        CASE WHEN ref.id IS NULL THEN 'NO_REFUND' ELSE ref.refund_type END AS pay_type,
                        IFNULL(E.name, type.`name`) AS payment_type
                FROM `bankpayment` b INNER JOIN
                (
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_capitron bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_capital bank where $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_tdb bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_xac bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_savings bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_golomt bank WHERE $whereSub UNION ALL
                select bank.created_at,bank.order_id,bank.bank_account,bank.order_date,bank.order_p,bank.order_amount,bank.id,bank.vendor_id, bank.order_type from bank_khaan bank WHERE $whereSub 
                ) bank1 ON bank1.id=b.bank_order_id AND b.vendor_id=bank1.vendor_id
                INNER JOIN vendor v ON v.id=b.vendor_id $tableAdd 
                LEFT OUTER JOIN bankpayment pa ON b.id = pa.parent_id
                LEFT OUTER JOIN bankpayment_vat_refund ref ON b.id = ref.bankpayment_id AND ref.type <> 'EDIT'
                LEFT OUTER JOIN bank_transaction.payment_type type ON ref.payment_type_id = type.id 
                LEFT OUTER JOIN bank_transaction.`transaction` tran ON bank1.order_amount = tran.order_amount AND bank1.order_date = tran.order_date AND
					bank1.order_id COLLATE utf8_general_ci = tran.order_id COLLATE utf8_general_ci AND bank1.order_type COLLATE utf8_general_ci = tran.order_type COLLATE utf8_general_ci AND b.parent_id = 0 AND
		CASE WHEN b.vendor_id = 1 THEN 2
				 WHEN b.vendor_id = 8 THEN 9
				 WHEN b.vendor_id = 9 THEN 1
				 WHEN b.vendor_id = 10 THEN 3
				 WHEN b.vendor_id = 11 THEN 4
				 WHEN b.vendor_id = 12 THEN 8
				 WHEN b.vendor_id = 13 THEN 12 END = tran.bank_id
		LEFT OUTER JOIN bank_transaction.transaction_payment C ON tran.id = C.transaction_id
		LEFT OUTER JOIN bank_transaction.payment D ON C.payment_id = D.id
		LEFT OUTER JOIN bank_transaction.payment_type E ON D.type_id = E.id
            WHERE IFNULL(pa.id,0) = 0 AND b.status < CASE WHEN ref.type = 'REFUND' AND ref.refund_type = 'PAYMENTTYPE' AND b.status = 9 THEN 10 ELSE 9 END AND $where ) t1 " . $whereTwo;
        $query .= " ORDER BY t1.created_at DESC";
//        echo $query;        die();
        $rows = $pdo->query($query)->fetchAll(PDO::FETCH_ASSOC);
        return $rows;
    }

    /**
     * Банкны нэр vendor id-р нь авах
     * @param integer $bank
     * @param integer $bankOderId
     * @return Bankpayment|null
     */
    public static function getBankNameByVendorId($bank)
    {
        switch ($bank) {
            case VendorTable::BANK_KHAAN:
                $bank = 'KHAAN';
                break;
            case VendorTable::BANK_SAVINGS:
                $bank = 'SAVINGS';
                break;
            case VendorTable::BANK_TDB:
                $bank = 'TDB';
                break;
            case VendorTable::GOLOMT:
                $bank = 'GOLOMT';
                break;
            case VendorTable::BANK_XAC:
                $bank = 'XAC';
                break;
            case VendorTable::BANK_CAPITAL:
                $bank = 'CAPITAL';
                break;
            case VendorTable::BANK_CAPITRON:
                $bank = 'CAPITRON';
                break;
            default:
                $bank = null;
                break;
        }
        return $bank;
    }

    /**
     * Банкны нэр vendor id-р нь авах
     * @param integer $bank
     * @param integer $bankOderId
     * @return Bankpayment|null
     */
    public static function getBankLowerNameByVendorId($bank)
    {
        switch ($bank) {
            case VendorTable::BANK_KHAAN:
                $bank = 'Khaan';
                break;
            case VendorTable::BANK_SAVINGS:
                $bank = 'Savings';
                break;
            case VendorTable::BANK_TDB:
                $bank = 'Tdb';
                break;
            case VendorTable::GOLOMT:
                $bank = 'Golomt';
                break;
            case VendorTable::BANK_XAC:
                $bank = 'Xac';
                break;
            case VendorTable::BANK_CAPITAL:
                $bank = 'Capital';
                break;
            case VendorTable::BANK_CAPITRON:
                $bank = 'Capitron';
                break;
            default:
                $bank = null;
                break;
        }
        return $bank;
    }

    /**
     * Candy данс цэнэглэлт
     *  дамжуулах
     * @param null $bankpaymentObject
     * @param null $number
     * @param $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function chargeLoyaltyApi($bankpaymentObject = null, $number = null, $limit = 50)
    {
        if ($bankpaymentObject instanceof Bankpayment) {
            if ($bankpaymentObject->canReCharge()) {
                $bankpaymentObject->status = self::STAT_PROCESS;
                $bankpaymentObject->save();
            } else {
                return FALSE;
            }
            $bankpaymentRows = array($bankpaymentObject);
        } elseif ($bankpaymentObject) {
            return FALSE;
        } else {
            $bankpaymentRows = self::updateForCharge(array(self::TYPE_CANDY_LOAN, self::TYPE_CANDY_CASHIN, self::TYPE_CANDY_AGENT, self::TYPE_CANDY_QPAY), 'type DESC', $limit);
        }
        foreach ($bankpaymentRows as $bankpaymentRow) {
            try {
                if ($number) {
                    if ($bankpaymentRow['type'] == self::TYPE_CANDY_LOAN) {
                        $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $number);
                        preg_match_all("/([9][954][0-9]{6})|(85[0-9]{6})/", $txnDesc, $matches);
                        if (!count($matches[0])) {
                            $bankpaymentRow->status_comment = $number;
                            $bankpaymentRow->status = self::STAT_IMPOSSIBLE;
                            $bankpaymentRow->save();
                            return FALSE;
                        }
                    }
                    $chargeNumber = $number;
                } else {
                    $chargeNumber = $bankpaymentRow['number'];
                }
                if (in_array($bankpaymentRow->status, array(self::STAT_FAILED_CHARGE))) {
                    $bankpaymentRow->status = self::STAT_PROCESS;
                    $bankpaymentRow->save();
                }
                $bankName = self::getBankNameByVendorId($bankpaymentRow['vendor_id']);
                $bankNameLower = self::getBankLowerNameByVendorId($bankpaymentRow['vendor_id']);
                $bankTransaction = BankpaymentTable::getBankTransaction($bankpaymentRow['vendor_id'], $bankpaymentRow['bank_order_id']);

                switch ($bankpaymentRow['type']) {
                    case BankpaymentTable::TYPE_CANDY_QPAY:
                        $result = LoyaltyCharge::chargeQPay($bankTransaction, $bankpaymentRow, $chargeNumber);
                        break;
                    case BankpaymentTable::TYPE_CANDY_AGENT:
                        $result = LoyaltyCharge::chargeCandyAgent($bankpaymentRow['contract_number'], $bankTransaction['bank_account'], $bankpaymentRow['paid_amount']);
                        break;
                    case BankpaymentTable::TYPE_CANDY_CASHIN:
                        $result = LoyaltyCharge::charge($chargeNumber, $bankpaymentRow['paid_amount'], $bankpaymentRow['id'], false, $bankName);
                        break;
                    case BankpaymentTable::TYPE_CANDY_LOAN:
                        $result = LoyaltyCharge::chargeLoan($chargeNumber, $bankpaymentRow['paid_amount'], $bankpaymentRow['id'], $bankNameLower);
                        break;
                    default:
                        break;
                }
                if ($result['Code'] != 200) {
                    $bankpaymentRow->setStatus(self::STAT_FAILED_CHARGE);
                } else {
                    $bankpaymentRow->setStatus(self::STAT_SUCCESS);
                }
                if (isset($result['Number'])) {
                    $bankpaymentRow->setNumber($result['Number']);
                } else {
                    $bankpaymentRow->setNumber($chargeNumber);
                }
                if ($number) {
                    $bankpaymentRow->setTryCount($bankpaymentRow->getTryCount() + 1);
                }
                $bankpaymentRow->save();
                unset($bankpaymentRow);
            } catch (\Exception $ex) {
                $bankpaymentRow->status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                $bankpaymentRow->status_comment = "Амжилтгүй, алдаа гарлаа.)";
                if ($number) {
                    $bankpaymentRow->setTryCount($bankpaymentRow->getTryCount() + 1);
                }
                $bankpaymentRow->save();
            }
        }

        return TRUE;
    }

    public static function checkLoanAccount($bank, $account)
    {
        switch ($bank) {
            case VendorTable::BANK_KHAAN:
                if ($account == BankKhaanAccountTable::ACCOUNT_MOBIFINANCE_CANDY) {
                    $response = true;
                }
                break;
            case VendorTable::BANK_SAVINGS:
                if ($account == BankSavingsTable::ACCOUNT_MOBIFINANCE_CANDY) {
                    $response = true;
                }
                break;
            case VendorTable::GOLOMT:
                if ($account == BankGolomtTable::ACCOUNT_MOBIFINANCE_CANDY) {
                    $response = true;
                }
                break;
            case VendorTable::BANK_XAC:
                if ($account == BankXacAccountTable::ACCOUNT_MOBIFINANCE_CANDY) {
                    $response = true;
                }
                break;
            case VendorTable::BANK_TDB:
                if ($account == BankTdbTable::ACCOUNT_MOBIFINANCE_CANDY) {
                    $response = true;
                }
                break;
            default:
                $response = null;
                break;
        }
        if (!$response) {
            $response = false;
        }
        return $response;
    }

}
