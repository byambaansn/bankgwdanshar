<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('LogPayment', 'transaction');

/**
 * BaseLogPayment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $payment_id
 * @property string $action
 * @property integer $type_id
 * @property float $amount
 * @property integer $description
 * @property integer $status
 * @property integer $created_user_id
 * @property string $username
 * @property timestamp $created_at
 * @property string $db_user
 * 
 * @method integer    getId()              Returns the current record's "id" value
 * @method integer    getPaymentId()       Returns the current record's "payment_id" value
 * @method string     getAction()          Returns the current record's "action" value
 * @method integer    getTypeId()          Returns the current record's "type_id" value
 * @method float      getAmount()          Returns the current record's "amount" value
 * @method integer    getDescription()     Returns the current record's "description" value
 * @method integer    getStatus()          Returns the current record's "status" value
 * @method integer    getCreatedUserId()   Returns the current record's "created_user_id" value
 * @method string     getUsername()        Returns the current record's "username" value
 * @method timestamp  getCreatedAt()       Returns the current record's "created_at" value
 * @method string     getDbUser()          Returns the current record's "db_user" value
 * @method LogPayment setId()              Sets the current record's "id" value
 * @method LogPayment setPaymentId()       Sets the current record's "payment_id" value
 * @method LogPayment setAction()          Sets the current record's "action" value
 * @method LogPayment setTypeId()          Sets the current record's "type_id" value
 * @method LogPayment setAmount()          Sets the current record's "amount" value
 * @method LogPayment setDescription()     Sets the current record's "description" value
 * @method LogPayment setStatus()          Sets the current record's "status" value
 * @method LogPayment setCreatedUserId()   Sets the current record's "created_user_id" value
 * @method LogPayment setUsername()        Sets the current record's "username" value
 * @method LogPayment setCreatedAt()       Sets the current record's "created_at" value
 * @method LogPayment setDbUser()          Sets the current record's "db_user" value
 * 
 * @package    BANKGW
 * @subpackage model
 * @author     Belbayar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseLogPayment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('log_payment');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('payment_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('action', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('type_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('amount', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('description', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('created_user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('db_user', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}