<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Transaction', 'transaction');

/**
 * BaseTransaction
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $bank_id
 * @property string $bank_account
 * @property string $order_id
 * @property timestamp $order_date
 * @property string $order_p
 * @property string $order_type
 * @property float $order_amount
 * @property string $order_branch
 * @property integer $status
 * @property timestamp $updated_at
 * @property integer $updated_user_id
 * @property timestamp $created_at
 * @property Bank $Bank
 * @property Doctrine_Collection $TransactionPayment
 * 
 * @method integer             getId()                    Returns the current record's "id" value
 * @method integer             getBankId()                Returns the current record's "bank_id" value
 * @method string              getBankAccount()           Returns the current record's "bank_account" value
 * @method string              getOrderId()               Returns the current record's "order_id" value
 * @method timestamp           getOrderDate()             Returns the current record's "order_date" value
 * @method string              getOrderP()                Returns the current record's "order_p" value
 * @method string              getOrderType()             Returns the current record's "order_type" value
 * @method float               getOrderAmount()           Returns the current record's "order_amount" value
 * @method string              getOrderBranch()           Returns the current record's "order_branch" value
 * @method integer             getStatus()                Returns the current record's "status" value
 * @method timestamp           getUpdatedAt()             Returns the current record's "updated_at" value
 * @method integer             getUpdatedUserId()         Returns the current record's "updated_user_id" value
 * @method timestamp           getCreatedAt()             Returns the current record's "created_at" value
 * @method Bank                getBank()                  Returns the current record's "Bank" value
 * @method Doctrine_Collection getTransactionPayment()    Returns the current record's "TransactionPayment" collection
 * @method Transaction         setId()                    Sets the current record's "id" value
 * @method Transaction         setBankId()                Sets the current record's "bank_id" value
 * @method Transaction         setBankAccount()           Sets the current record's "bank_account" value
 * @method Transaction         setOrderId()               Sets the current record's "order_id" value
 * @method Transaction         setOrderDate()             Sets the current record's "order_date" value
 * @method Transaction         setOrderP()                Sets the current record's "order_p" value
 * @method Transaction         setOrderType()             Sets the current record's "order_type" value
 * @method Transaction         setOrderAmount()           Sets the current record's "order_amount" value
 * @method Transaction         setOrderBranch()           Sets the current record's "order_branch" value
 * @method Transaction         setStatus()                Sets the current record's "status" value
 * @method Transaction         setUpdatedAt()             Sets the current record's "updated_at" value
 * @method Transaction         setUpdatedUserId()         Sets the current record's "updated_user_id" value
 * @method Transaction         setCreatedAt()             Sets the current record's "created_at" value
 * @method Transaction         setBank()                  Sets the current record's "Bank" value
 * @method Transaction         setTransactionPayment()    Sets the current record's "TransactionPayment" collection
 * 
 * @package    BANKGW
 * @subpackage model
 * @author     Belbayar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTransaction extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('transaction');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('bank_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('bank_account', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('order_id', 'string', 30, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 30,
             ));
        $this->hasColumn('order_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('order_p', 'string', 500, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 500,
             ));
        $this->hasColumn('order_type', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('order_amount', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('order_branch', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Bank', array(
             'local' => 'bank_id',
             'foreign' => 'id'));

        $this->hasMany('TransactionPayment', array(
             'local' => 'id',
             'foreign' => 'transaction_id'));
    }
}