<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('BankpaymentTransfertype', 'doctrine');

/**
 * BaseBankpaymentTransfertype
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property string $c_type
 * @property string $c_bank
 * @property string $c_account
 * @property string $c_regex
 * @property bit $c_mustmatch
 * @property integer $c_matchindex
 * @property bit $c_active
 * @property integer $c_priority
 * @property string $c_description
 * @property string $c_rule
 * @property string $payment_code
 * 
 * @method string                  getCType()         Returns the current record's "c_type" value
 * @method string                  getCBank()         Returns the current record's "c_bank" value
 * @method string                  getCAccount()      Returns the current record's "c_account" value
 * @method string                  getCRegex()        Returns the current record's "c_regex" value
 * @method bit                     getCMustmatch()    Returns the current record's "c_mustmatch" value
 * @method integer                 getCMatchindex()   Returns the current record's "c_matchindex" value
 * @method bit                     getCActive()       Returns the current record's "c_active" value
 * @method integer                 getCPriority()     Returns the current record's "c_priority" value
 * @method string                  getCDescription()  Returns the current record's "c_description" value
 * @method string                  getCRule()         Returns the current record's "c_rule" value
 * @method string                  getPaymentCode()   Returns the current record's "payment_code" value
 * @method BankpaymentTransfertype setCType()         Sets the current record's "c_type" value
 * @method BankpaymentTransfertype setCBank()         Sets the current record's "c_bank" value
 * @method BankpaymentTransfertype setCAccount()      Sets the current record's "c_account" value
 * @method BankpaymentTransfertype setCRegex()        Sets the current record's "c_regex" value
 * @method BankpaymentTransfertype setCMustmatch()    Sets the current record's "c_mustmatch" value
 * @method BankpaymentTransfertype setCMatchindex()   Sets the current record's "c_matchindex" value
 * @method BankpaymentTransfertype setCActive()       Sets the current record's "c_active" value
 * @method BankpaymentTransfertype setCPriority()     Sets the current record's "c_priority" value
 * @method BankpaymentTransfertype setCDescription()  Sets the current record's "c_description" value
 * @method BankpaymentTransfertype setCRule()         Sets the current record's "c_rule" value
 * @method BankpaymentTransfertype setPaymentCode()   Sets the current record's "payment_code" value
 * 
 * @package    BANKGW
 * @subpackage model
 * @author     Belbayar
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseBankpaymentTransfertype extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('bankpayment_transfertype');
        $this->hasColumn('c_type', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('c_bank', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('c_account', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('c_regex', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('c_mustmatch', 'bit', 1, array(
             'type' => 'bit',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'b\'1\'',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('c_matchindex', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('c_active', 'bit', 1, array(
             'type' => 'bit',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('c_priority', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('c_description', 'string', 450, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 450,
             ));
        $this->hasColumn('c_rule', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('payment_code', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 10,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}