<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('ConfigAssignment', 'transaction');

/**
 * BaseConfigAssignment
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $filter
 * @property integer $type_id
 * @property integer $acc_type
 * @property integer $status
 * @property integer $priority
 * @property integer $filter_type
 * @property integer $filter_day
 * @property integer $updated_user_id
 * @property string $username
 * @property timestamp $updated_at
 * @property timestamp $created_at
 * @property PaymentType $PaymentType
 * 
 * @method integer          getId()              Returns the current record's "id" value
 * @method string           getFilter()          Returns the current record's "filter" value
 * @method integer          getTypeId()          Returns the current record's "type_id" value
 * @method integer          getAccType()         Returns the current record's "acc_type" value
 * @method integer          getStatus()          Returns the current record's "status" value
 * @method integer          getPriority()        Returns the current record's "priority" value
 * @method integer          getFilterType()      Returns the current record's "filter_type" value
 * @method integer          getFilterDay()       Returns the current record's "filter_day" value
 * @method integer          getUpdatedUserId()   Returns the current record's "updated_user_id" value
 * @method string           getUsername()        Returns the current record's "username" value
 * @method timestamp        getUpdatedAt()       Returns the current record's "updated_at" value
 * @method timestamp        getCreatedAt()       Returns the current record's "created_at" value
 * @method PaymentType      getPaymentType()     Returns the current record's "PaymentType" value
 * @method ConfigAssignment setId()              Sets the current record's "id" value
 * @method ConfigAssignment setFilter()          Sets the current record's "filter" value
 * @method ConfigAssignment setTypeId()          Sets the current record's "type_id" value
 * @method ConfigAssignment setAccType()         Sets the current record's "acc_type" value
 * @method ConfigAssignment setStatus()          Sets the current record's "status" value
 * @method ConfigAssignment setPriority()        Sets the current record's "priority" value
 * @method ConfigAssignment setFilterType()      Sets the current record's "filter_type" value
 * @method ConfigAssignment setFilterDay()       Sets the current record's "filter_day" value
 * @method ConfigAssignment setUpdatedUserId()   Sets the current record's "updated_user_id" value
 * @method ConfigAssignment setUsername()        Sets the current record's "username" value
 * @method ConfigAssignment setUpdatedAt()       Sets the current record's "updated_at" value
 * @method ConfigAssignment setCreatedAt()       Sets the current record's "created_at" value
 * @method ConfigAssignment setPaymentType()     Sets the current record's "PaymentType" value
 * 
 * @package    sf_sandbox
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseConfigAssignment extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('config_assignment');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 8,
             ));
        $this->hasColumn('filter', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('type_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('acc_type', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('priority', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('filter_type', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('filter_day', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('updated_user_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('username', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PaymentType', array(
             'local' => 'type_id',
             'foreign' => 'id'));
    }
}