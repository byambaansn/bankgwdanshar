<?php

/**
 * ConfigAssignmentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ConfigAssignmentTable extends Doctrine_Table
{
    CONST STATUS_ACTIVE = 1;
    CONST STATUS_DEACTIVE = 0;
    
    CONST FILTER_WORD = 1;          //Шүүх үгээр шүүх
    CONST FILTER_CODE = 2;          //10 тэмдэгтийг шүүх
    CONST FILTER_REST = 3;          //Бусад үлдсэн гүйлгээ
    
    CONST FILTER_EVERY_DAY = 0;     //Өдөр бүр ажиллана.
    CONST FILTER_MONTHLY_DAY = 2;   //Сар болгоны 2-нд ажиллана.

    /**
     * Returns an instance of this class.
     *
     * @return object ConfigAssignmentTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ConfigAssignment');
    }
    
    /**
     * config_assignment table-д нэмнэ.
     * 
     * @param $filter, $type, $priority, $paymentTypes, $params = array()
     * @return $configAssignment;
     */
    public static function insert($filter, $type, $priority, $paymentTypes, $params = array()) {
        $default = array('acc_type' => TransactionTable::TYPE_ALL, 'filter_type' => self::FILTER_WORD, 'filter_day' => self::FILTER_EVERY_DAY);
        $params = array_merge($default, $params);
        if(!$priority) $priority = self::getMaxPriority()+1;
        $oldPriority = self::getMaxPriority()+1;
        self::setUpPriority($priority, $oldPriority);
        $row = new ConfigAssignment();
        $row->setCreatedAt(date('Y-m-d H:i:s'));
        self::setValue($row, $priority, $filter, $params['acc_type'], $paymentTypes->getIdByName($type), 
                $params['filter_type'], $params['filter_day'], self::STATUS_ACTIVE, HrmCore::BOT_USER, 'insert');
        return $row;
    }

    /**
     * config_assignment table-д засвар хийж хадгалах.
     * 
     * @param $row, $priority, $filter, $accType, $paymentType, $filterType, $filterDay, $status, $userId, $username
     * @return $configAssignment;
     */
    public static function setValue(&$row, $priority, $filter, $accType, $paymentType, $filterType, $filterDay, $status, $userId, $username) {
        $row->setPriority($priority);
        $row->setFilter($filter);
        $row->setAccType($accType);
        $row->setTypeId($paymentType);
        $row->setFilterType($filterType);
        $row->setFilterDay($filterDay);
        $row->setStatus($status);
        $row->setUpdatedUserId($userId);
        $row->setUsername($username);
        $row->save();
    }

    /**
     * config_assignment table-д засвар хийж хадгалах.
     * 
     * @param $id, $priority, $filter, $accType, $paymentType, $filterType, $filterDay, $status, $userId, $username
     * @return $configAssignment;
     */
    public static function update($id, $priority, $filter, $accType, $paymentType, $filterType, $filterDay, $status, $userId, $username) {
        $row = self::getInstance()->find($id);
        if(!$priority) $priority = self::getMaxPriority()+1;
        if(!$row) { 
            $oldPriority = self::getMaxPriority()+1;
            $row = new ConfigAssignment();
        } else { $oldPriority = $row->getPriority(); }
        self::setUpPriority($priority, $oldPriority);
        self::setValue($row, $priority, $filter, $accType, $paymentType, $filterType, $filterDay, $status, $userId, $username);
        return $row;
    }

    /**
     * config_assignment table-д Default өгөгдлийг нэмнэ.
     * 
     * @return NONE;
     */
    public static function createDefaults() {

        if(self::getInstance()->count()) return;
        //Хэрэв Table хоосон бол Default өгөгдлийг нэмнэ.
        $paymentTypes = PaymentTypeTable::getInstance();
        $i = 1;
    //Бүх дансны хувьд
        self::insert('ТӨВЛӨРҮҮЛ', 'to cost', $i++, $paymentTypes);
        self::insert('SWEEP TO', 'to cost', $i++, $paymentTypes);
        self::insert('данс зузаатгал', 'to cost', $i++, $paymentTypes);
        //Сар бүрийн 02-ний өдөр өмнөх сарын Assignment зоогдоогүй үлдсэн бүх гүйлгээ хамаарна.
        self::insert('', 'УО', $i++, $paymentTypes, array('filter_type' => self::FILTER_REST, 'filter_day' => self::FILTER_MONTHLY_DAY));
    //Зардлын данс
        //Дараалсан 10 тэмдэгт шүүнэ, үүнд эхний 4 тэмдэгт нь тоо дараагийн 4 тэмдэгт нь үсэг дараагийн 2 тэмдэгт нь тоо байна. Жишээ: 1017ErdA01
        self::insert('0000AAAA00', 'Auto', $i++, $paymentTypes, array('filter_type' => self::FILTER_CODE, 'acc_type' => BankAccountTable::TYPE_EXPENSE));
        self::insert('ШИМТГЭЛ', 'bank charge', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_EXPENSE));
        self::insert('БЭЛЭН МӨНГӨНИЙ ХУРААМЖ', 'bank charge', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_EXPENSE));
        self::insert('Charge', 'bank charge', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_EXPENSE));
        self::insert('ЦАЛИН', 'salary', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_EXPENSE));
    //Ярианы төлбөрийн данс
        self::insert('billing', 'ebilling', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_CALLPAYMET));
        self::insert('инкасс', 'incass', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_CALLPAYMET));
        self::insert('inkass', 'incass', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_CALLPAYMET));
        self::insert('incass', 'incass', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_CALLPAYMET));
    //Цүнхтэй мөнгөний данс
        self::insert('WWW.MOBICOM.MN', 'WWW.MOBICOM.MN', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('DARKHAN MOBICOM', 'DARKHAN MOBICOM', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ДАРХАН', 'Дархан', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('MOBIPLAY', 'mobiplay.mn', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Картын гүйлгээ хаав', 'MOBICOM', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Ариг', 'Arig', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Архангай', 'Архангай', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Алтанбулаг', 'Алтанбулаг', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БАГАНУУР', 'Багануур', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БАЯН-ӨЛГИЙ', 'Баян-Өлгий', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БАЯНӨЛГИЙ', 'Баян-Өлгий', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БАЯН ӨЛГИЙ', 'Баян-Өлгий', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Баянхонгор', 'Баянхонгор', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Бор-Өндөр', 'Бор-Өндөр', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БорӨндөр', 'Бор-Өндөр', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Бор Өндөр', 'Бор-Өндөр', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БУЛГАН', 'Булган', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Бүрэнхайрхан', 'Бүрэнхайрхан', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ГОВЬ-АЛТАЙ', 'Говь-Алтай', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ГОВЬ АЛТАЙ', 'Говь-Алтай', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ГОВЬАЛТАЙ', 'Говь-Алтай', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ГОВЬСҮМБЭР', 'Чойр', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ГОВЬ СҮМБЭР', 'Чойр', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ГОВЬ-СҮМБЭР', 'Чойр', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ДОРНОД', 'Дорнод', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ДУНДГОВЬ', 'Дундговь', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЗАВХАН', 'Завхан', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЗАМЫН-ҮҮД', 'Замын-Үүд', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЗАМЫНҮҮД', 'Замын-Үүд', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЗАМЫН ҮҮД', 'Замын-Үүд', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЗҮҮНХАРАА', 'Зүүнхараа', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ОРХОН', 'Эрдэнэт', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ОЮУТОЛГОЙ', 'Оюу толгой', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ОЮУ ТОЛГОЙ', 'Оюу толгой', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ӨВӨРХАНГАЙ', 'Өвөрхангай', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ӨМНӨГОВЬ', 'Өмнөговь', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('САЙНШАНД', 'Сайншанд', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ДОРНОГОВЬ', 'Сайншанд', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('СҮХБААТАР', 'Сүхбаатар', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('СЭЛЭНГЭ', 'Сэлэнгэ', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ТӨВ', 'Төв', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('УВС', 'Увс', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ХАРХОРИН', 'Хархорин', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ХОВД', 'Ховд', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ХӨВСГӨЛ', 'Хөвсгөл', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ХӨТӨЛ', 'Хөтөл', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ХЭНТИЙ', 'Хэнтий', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЦОГТЦЭЦИЙ', 'Цогтцэций', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ЦОГТ ЦЭЦИЙ', 'Цогтцэций', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ШАРЫН ГОЛ', 'Шарын гол', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ШАРЫНГОЛ', 'Шарын гол', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('ШИМТГЭЛ', 'bank charge', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('БЭЛЭН МӨНГӨНИЙ ХУРААМЖ', 'bank charge', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        self::insert('Charge', 'bank charge', $i++, $paymentTypes, array('acc_type' => BankAccountTable::TYPE_BAG));
        //Бусад үлдсэн гүйлгээг бүгдийг
        self::insert('', 'by bag', $i++, $paymentTypes, array('filter_type' => self::FILTER_REST, 'acc_type' => BankAccountTable::TYPE_BAG));
    }

    /**
     * Шүүх үгнүүдийн жагсаалтыг буцаана.
     *
     * @return Doctrine_Collection
     * @throws Doctrine_Query_Exception
     */
    public static function checkIfFilterExists() {
        // config_assignment table хоосон бол Default өгөгдлийг нэмнэ.
        self::createDefaults();
        $q = Doctrine_Query::create()
                ->select('count(*)')
                ->from('ConfigAssignment')
                ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        return $q;
    }
    
    public static function getStatuses()
    {
        $status = array(
            '1' => '<b class="green">Идэвхтэй</b>',
            '0' => '<b class="red">Идэвхгүй</b>',
        );
        return $status;
    }

    public static function getFilterTypes() 
    {
        $type = array(
            '1' => 'Үгээр шүүх',
            '2' => 'Кодоор шүүх',
            '3' => 'Үлдсэн гүйлгээ',
        );
        return $type;
    }

    public static function getFilterDays() 
    {
        $day = array( self::FILTER_EVERY_DAY => 'Өдөр бүр' );
        for($i=1;$i<32;$i++) $day[$i] = $i;
        return $day;
    }

    public static function getAccTypes()
    {
        $types = array( TransactionTable::TYPE_ALL => 'Бүх данс' );
        $types = array_merge($types, BankAccountTable::getTypes());

        return $types;
    }
    
    /**
     * Шүүлт хийх эрэмбийг өөрчлөхөд ажиллуулна.
     * 
     * @param $new, $old
     * @return NONE;
     */
    public static function setUpPriority($new, $old) {
        
        if($new==$old) return;
        
        if($new<$old) {
            $val = 'priority + 1';
            $between = $new . ' and ' . ($old-1);
        } else {
            $val = 'priority - 1';
            $between = ($old+1) . ' and ' . $new;
        }
        
        Doctrine_Query::create()
                ->update('ConfigAssignment')
                ->set('priority', $val)
                ->where('priority between ' . $between)
                ->execute();
        
    }
    
    public static function getMaxPriority() {
        
        $q = Doctrine_Query::create()
                ->select('max(priority) as max')
                ->from('ConfigAssignment');
        
        $row = $q->fetchOne();
        
        return $row->get('max');
        
    }
    
    public static function getList($onlyActive = TRUE) {
        
        $q = Doctrine_Query::create()
                //->select('*')
                ->from('ConfigAssignment c')
                ->leftJoin('c.PaymentType p')
                ->orderBy('c.priority, c.id');
        
        if($onlyActive) $q->where('c.status = ?', self::STATUS_ACTIVE);
        
        //print_r($q->fetchArray()); die();
        //die($q->getSqlQuery());
        
        return $q->fetchArray();
        
    }

    public static function getTransactionFilters($transactionType, $filter_day) {
        $filters = Doctrine_Query::create()
            ->select('filter, type_id, acc_type, filter_type, filter_day')
            ->from('ConfigAssignment')
            ->whereIn('acc_type', array($transactionType, TransactionTable::TYPE_ALL))
            ->andWhereIn('filter_day', array(self::FILTER_EVERY_DAY, date('j'), $filter_day))
            ->orderBy('priority, id')
            ->fetchArray();

        $search = array('0','A');
        $replace = array('[0-9]','[a-zA-Z]');

        foreach ($filters as &$f) {
            if($f['filter_type']==self::FILTER_CODE) {
                $f['filter'] = '/'.str_replace($search, $replace, $f['filter']).'/';
            }
        }

        return $filters;
    }
    
}