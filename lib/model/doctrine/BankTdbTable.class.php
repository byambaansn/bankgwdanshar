<?php

/**
 * BankTdbTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BankTdbTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object BankTdbTable
     */
    const STAT_NEW = 1;
    const STAT_PROCESS = 2;
    const STAT_SUCCESS = 3;
    const STAT_FAILED_CHARGE = 4;
    const STAT_FAILED_OUTCOME = 5;
    const STAT_FAILED_DEALER = 6;
    const STAT_FAILED = 7;
    const STAT_FAILED_MAX_AMOUNT = 8;
    const STAT_FAILED_DUPLICATE_AMOUNT = 9;
    const STAT_FAILED_MIN_AMOUNT = 10;
    const STAT_CORRECTION = 11; // банкны залруулга
    const STAT_CORRECTION_SUCCESS = 12; // банкны залруулга амжилттай
    const STAT_CORRECTION_FAILED = 13; // банкны залруулга амжилтгүй
    const STAT_FAILED_LOYALTY_PARTNER = 16; // Candy API ruu handaj agent baihgu bol
    const MAX_TRY_COUNT = 3;
    const MAX_AMOUNT_LIMIT = 99999999;
    const MIN_AMOUNT_LIMIT = 28800;
    #type
    CONST TYPE_DEALER = 1;
    CONST TYPE_CALLPAYMENT = 2;
    #ACCOUNT
    CONST ACCOUNT_DEALER = '499223583';
    CONST ACCOUNT_DEALER_MOBICOM = '';
    CONST ACCOUNT_CALLPAYMENT = '499004325';
    CONST ACCOUNT_PRODUCT_PAYMENT = '';
    CONST ACCOUNT_PRODUCT_MOBINET = '452533611';
    CONST ACCOUNT_PRODUCT_ULUSNET = '499134107';
    CONST ACCOUNT_PRODUCT_BAG = '';
    CONST ACCOUNT_MOBINET_PAYMENT = '452533612';
    CONST ACCOUNT_MOBIFINANCE_CANDY = '452549257';
    CONST ACCOUNT_CANDY_CASHIN = '429001055';
    /**
     * Returns an instance of this class.
     *
     * @return object BankTdbTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BankTdb');
    }

    public static function getByOrderId($orderId, $orderIdSub, $type)
    {
        $sql = "SELECT * 
                FROM bankgw.bank_tdb
                WHERE order_id = '$orderId' AND order_id_sub='$orderIdSub' AND order_type='$type'";
        $pdo = Doctrine_Manager::connection()->getDbh();
        return $pdo->query($sql)->fetch();
    }

    /**
     * 
     * @param int $id
     * @param int $status
     * @return BankTdb
     */
    public static function retrieveByPK($id, $status = 0)
    {
        $q = Doctrine_Query::create()
                ->from('BankTdb')
                ->where('id = ?', $id);

        if ($status) {
            $q->andWhere('status = ?', $status);
        }

        return $q->fetchOne();
    }

    /**
     * 
     * @param int $orderId
     * @return BankTdb
     */
    public static function findOneByOrderId($orderId)
    {
        $q = Doctrine_Query::create()
                ->from('BankTdb')
                ->where('order_id = ?', $orderId)
                ->addWhere('vendor_id = ?', $bankId);
//         DATE_FORMAT(o.outcome_date, '%Y-%m-%d')
        return $q->fetchOne();
    }

    /**
     * залруулга олох
     * @param int $number , amount
     * @param $amount
     * @return BankTdb
     */
    public static function findOneByNumberAndAmount($number, $amount)
    {
        $q = Doctrine_Query::create()
                ->from('BankTdb')
                ->where('order_id = ?', $number)
                ->addWhere('status = ?', self::STAT_NEW)
                ->addWhere('vendor_id = ?', $amount);
        return $q->fetchOne();
    }

    /**
     * залруулга төлөвт оруулах
     * @param int $number , amount
     * @param int $amount
     * @return bool|Doctrine_Collection
     * @throws Doctrine_Query_Exception
     */
    public static function updateTransByCorrection($number = 0, $amount = 0)
    {
        if ($number) {
            $q = Doctrine_Query::create()
                    ->update('BankTdb')
                    ->set('status', '?', self::STAT_CORRECTION)
                    ->where('charge_mobile = ?', $number)
                    ->addWhere('status = ?', self::STAT_NEW)
                    ->addWhere('order_amount = ?', $amount);
            return $q->execute();
        }
        return FALSE;
    }

    /**
     *
     * @param $account
     * @param bool $excel
     * @return \sfDoctrinePager
     * @throws Doctrine_Query_Exception
     * @throws sfException
     */
    public static function getList($account, $excel = false)
    {
        $q = Doctrine_Query::create()
                ->from('BankTdb');
        if (is_array($account)) {
            $q->whereIn('bank_account', $account);
        } else {
            $q->where('bank_account = ?', $account);
        }
        $q->addWhere('vendor_id = ?', VendorTable::BANK_TDB)
                ->orderBy('status DESC, id DESC');
        $request = sfContext::getInstance()->getRequest();

        // mandatory
        $dateFrom = $request->getParameter('dateFrom') ? $request->getParameter('dateFrom') : date('Y-m-d');
        $dateTo = $request->getParameter('dateTo') ? $request->getParameter('dateTo') : date('Y-m-d');
        $q->addWhere("created_at >= ?", $dateFrom . " 00:00:00");
        $q->addWhere("created_at <= ?", $dateTo . " 23:59:59");

        // optional
        $chargedMobile = (int) $request->getParameter('chargedMobile');
        if ($chargedMobile) {
            $q->addWhere('charge_mobile = ?', $chargedMobile);
        }

        // optional
        $orderedMobile = (int) $request->getParameter('orderedMobile');
        if ($orderedMobile) {
            $q->addWhere('order_mobile = ?', $orderedMobile);
        }

        // optional
        $orderId = $request->getParameter('orderId');
        if ($orderId) {
            $q->addWhere('order_id = ?', $orderId);
        }

        // optional
        $status = (int) $request->getParameter('status');
        if ($status) {
            $q->addWhere('status = ?', $status);
        }
        if ($excel) {
            return $q->execute();
        }

        // pager
        $page = (int) $request->getParameter('page', 1);

        $pager = new sfDoctrinePager('BankTdb', 100);
        $pager->setQuery($q);
        $pager->setPage($page);
        $pager->init();

        return $pager;
    }

    /**
     *
     * @param $account
     * @param bool $excel
     * @return array
     * @throws Doctrine_Manager_Exception
     * @throws sfException
     */
    public static function getListCustom($account, $excel = false)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();

        $where = array();

        $where[] = "vendor_id=" . VendorTable::BANK_TDB;

        if (is_array($account)) {
            $where[] = "b.bank_account IN (" . implode(',', $account) . ")";
        } else {
            $where[] = "b.bank_account ='$account'";
        }

        $request = sfContext::getInstance()->getRequest();
        // mandatory
        $dateFrom = $request->getParameter('dateFrom') ? $request->getParameter('dateFrom') : date('Y-m-d');
        $dateTo = $request->getParameter('dateTo') ? $request->getParameter('dateTo') : date('Y-m-d');
        $where[] = "b.created_at >='$dateFrom 00:00:00'";
        $where[] = "b.created_at <='$dateTo 23:59:59'";

        // optional
        $chargedMobile = (int) $request->getParameter('chargedMobile');
        if ($chargedMobile) {
            $where[] = "b.charge_mobile ='$chargedMobile'";
        }

        // optional
        $orderedMobile = (int) $request->getParameter('orderedMobile');
        if ($orderedMobile) {
            $where[] = "b.order_mobile ='$orderedMobile'";
        }

        // optional
        $orderId = $request->getParameter('orderId');
        if ($orderId) {
            $where[] = "b.order_id ='$orderId'";
        }

        // optional
        $status = (int) $request->getParameter('status');
        if ($status) {
            $where[] = "b.status ='$status'";
        }
        $where = implode(' AND ', $where);

        $query = "
            SELECT b.*
            FROM bankgw.bank_tdb AS b
            WHERE $where
            ORDER BY b.status DESC, b.id DESC";

        $rows = $pdo->query($query)->fetchAll(PDO::FETCH_ASSOC);

        return $rows;
    }

    /**
     * Төлөв
     *
     * @param $type
     * @return array
     */
    public static function getForSelectStatus($type)
    {
        switch ($type) {
            case self::TYPE_DEALER:
                $status = array(
                    self::STAT_NEW => 'Шинэ хуулга',
                    self::STAT_PROCESS => 'Цэнэглэж байна',
                    self::STAT_SUCCESS => 'Амжилттай цэнэглэсэн',
                    self::STAT_FAILED_CHARGE => 'Цэнэглэлт хийгдсэнгүй',
                    self::STAT_FAILED_OUTCOME => 'Зарлага хийгдсэнгүй',
                    self::STAT_FAILED_DEALER => 'Гэрээт олдсонгүй',
                    self::STAT_FAILED => 'Алдаа гарсан',
                    self::STAT_FAILED_MAX_AMOUNT => 'Их хэмжээний дүнтэй',
                    self::STAT_FAILED_DUPLICATE_AMOUNT => 'Ижил хэмжээний үнийн дүнтэй цэнэглэлт/баталгаажуулах/',
                    self::STAT_FAILED_MIN_AMOUNT => 'Цэнэглэх доод хязгаараас бага дүнтэй',
                    self::STAT_CORRECTION => 'Банкны залруулга',
                    self::STAT_CORRECTION_SUCCESS => 'Банкны залруулга амжилттай',
                    self::STAT_CORRECTION_SUCCESS => 'Банкны залруулга амжилтгүй',
                );
                break;
            case self::TYPE_CALLPAYMENT:
                $status = array(
                    self::STAT_NEW => 'Шинэ хуулга',
                    self::STAT_PROCESS => 'Төлөлт оруулж байна',
                    self::STAT_SUCCESS => 'Амжилттай төлөлт оруулсан',
                    self::STAT_FAILED_CHARGE => 'Төлөлт оруулсангүй',
                    self::STAT_FAILED => 'Алдаа гарсан',
                );
                break;
        }
        return $status;
    }

    /**
     * Төлвийн нэр
     *
     * @param int $v
     * @param $type
     * @param boolean $img
     * @return string
     */
    public static function getStatusName($v, $type, $img = false)
    {
        $v = (int) $v;

        $arr = self::getForSelectStatus($type);

        if (!isset($arr[$v])) {
            return '#';
        }

        if (!$img) {
            return $arr[$v];
        }

        $attr = 'title="' . $arr[$v] . '" alt="' . $arr[$v] . '"';

        switch ($v) {
            case self::STAT_NEW:
                return '<img src="/images/icons/info.png" ' . $attr . ' />';
            case self::STAT_PROCESS:
                return '<img src="/images/icons/process.png" ' . $attr . ' />';
            case self::STAT_FAILED_OUTCOME:
                return '<img src="/images/icons/warning.png" ' . $attr . ' />';
            case self::STAT_SUCCESS:
                return '<img src="/images/icons/save.png" ' . $attr . ' />';
            case self::STAT_FAILED_CHARGE:
                return '<img src="/images/icons/error.png" ' . $attr . ' />';
            case self::STAT_FAILED_DEALER:
                return '<img src="/images/icons/user_delete.png" ' . $attr . ' />';
            case self::STAT_FAILED:
                return '<img src="/images/icons/error.png" ' . $attr . ' />';
            case self::STAT_FAILED_MAX_AMOUNT:
                return '<img src="/images/icons/world.png" ' . $attr . ' />';
            case self::STAT_FAILED_MIN_AMOUNT:
                return '<img src="/images/icons/world.png" ' . $attr . ' />';
            case self::STAT_CORRECTION:
                return '<img src="/images/icons/adjustment.png" ' . $attr . ' />';
            case self::STAT_CORRECTION_SUCCESS:
                return '<img src="/images/icons/adjustment_green.png" ' . $attr . ' />';
            case self::STAT_CORRECTION_FAILED:
                return '<img src="/images/icons/adjustment_red.png" ' . $attr . ' />';
            default :
                return '#';
        }
    }

    /**
     * 
     * @param array $trans
     * @return BankTdb|null
     */
    public static function insert($trans)
    {
        $bankOrder = new BankTdb();
        $bankOrder->order_id = $trans['JournalNo'];
        $bankOrder->order_id_sub = $trans['JournalNoSub'];
        $bankOrder->bank_account = $trans['Account'];
        $bankOrder->order_p = $trans['TxnDesc'];
        $bankOrder->order_type = $trans['TxnType'];
        $bankOrder->order_amount = $trans['Amount'];
        $bankOrder->order_date = $trans['TxnDate'];
        $bankOrder->order_s = $trans['Branch'];
        $bankOrder->order_channel = $trans['Channel'] ? $trans['Channel'] : "";
        $bankOrder->order_teller = $trans['Teller'];
        $bankOrder->status = self::STAT_NEW;
        $bankOrder->vendor_id = VendorTable::BANK_TDB;
        $bankOrder->created_at = date('Y-m-d H:i:s');
        $bankOrder->charge_amount = 0;
        $bankOrder->order_mobile = 0;
        $bankOrder->charge_mobile = 0;
        $bankOrder->percent = 0;

        $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $trans['TxnDesc']);

        preg_match_all("/([9][954][0-9]{6})|(85[0-9]{6})/", $txnDesc, $matches);
        foreach ($matches as $numberArr) {
            foreach ($numberArr as $number) {
                $number = trim($number);
                if ($number) {
                    $bankOrder->order_mobile = $number;
                    $bankOrder->charge_mobile = $number;
                    continue;
                }
            }
        }
        $bankOrder->save();
        return $bankOrder;
    }

    /**
     * Дахин цэнэглэлт
     *
     * @param null $bankOrder
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function recharge($bankOrder = null, $limit = 50)
    {
        $customer = FALSE;
        if ($bankOrder instanceof BankTdb) {
            if ($bankOrder->canReCharge()) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
                $customer = TRUE;
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_DEALER, self::ACCOUNT_DEALER_MOBICOM), $limit);
        }

        foreach ($bankOrderRows as $bankOrder) {
            try {
                $SD = $ADshop = FALSE;
                $chargeResult = $adCode = null;
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }
                if ($bankOrder->status == self::STAT_PROCESS) {
                    $bankOrder->try_count++;
                    $dealer = false;
                    # Dealer AGENT check
                    $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/dealer/process-' . date("Ymd") . '.log'));
                    $dealerAgent = DealerGateway::findDealerByMobile($bankOrder->charge_mobile, $logger);
//                    print_r($dealerAgent);die();
                    if (!$dealerAgent) {
                        $dealer = DealerCharge::getDealer($bankOrder->charge_mobile);
                        if (BaseSms::isSdDealer($bankOrder->order_p)) {
                            $SD = TRUE;
                        } else {
                            $adCode = BaseSms::isAdShop($bankOrder->order_p);
                            if ($adCode) {
                                $ADshop = TRUE;
                            } else {
                                # If the charge amount exceeds the max amount limit
                                if ($bankOrder->order_amount > self::MAX_AMOUNT_LIMIT) {
                                    $bankOrder->status = self::STAT_FAILED_MAX_AMOUNT;
                                    $bankOrder->save();
                                    self::notifyOperators($bankOrder);
                                    continue;
                                } elseif ($bankOrder->order_amount < self::MIN_AMOUNT_LIMIT) {
                                    $bankOrder->status = self::STAT_FAILED_MIN_AMOUNT;
                                    $bankOrder->save();
                                    self::notifyOperators($bankOrder);
                                    continue;
                                }
                            }
                        }
                    }
                    if ($dealerAgent || $dealer || $adCode) {
                        $logId = LogTools::setLogTdbCharge($bankOrder->id);
                        $orderMobile = null;
                        unset($chargeResult);
                        $time = -time();
                        # Цэнэглэлт хийх
                        if ($SD) {
                            $chargeResult = BaseSms::chargeSdDealer($bankOrder->charge_mobile, $bankOrder->order_amount, 'TDB');
                        } elseif ($ADshop) {
                            $chargeResult = BaseSms::chargeAdDealer($adCode, $bankOrder->order_amount, 'TDB');
                        } elseif ($dealerAgent) {
                            $chargeResult = DealerGateway::charge($dealerAgent['dealerId'], $bankOrder->order_amount, 'TDB', $logger);
                            $orderMobile = $dealerAgent['dealerCode'];
                        } else {
                            $chargeResult = DealerCharge::charge($bankOrder->charge_mobile, $bankOrder->order_amount);
                        }
                        $time += time();

                        LogTools::updateLogTdbCharge($logId, $chargeResult['log_request'], $chargeResult['log_response'], $time);

                        if ($chargeResult['success'] == TRUE) {
                            # Цэнэглэгдсэн мөнгөн дүн болон хувийг хадгалах
                            $bankOrder->charge_amount = $chargeResult['transferred'];
                            $bankOrder->percent = $chargeResult['percent'];
                            if ($orderMobile) {
                                $bankOrder->order_mobile = $orderMobile;
                            }
                            $bankOrder->save();
                            if ($customer) {
                                if ($ADshop) {
                                    TransactionTable::setRechargeAssignment(PaymentTypeTable::DEALER_AD, BankTable::TDB, $bankOrder->bank_account, $bankOrder->order_id, $bankOrder->order_date, $bankOrder->order_p, $bankOrder->order_type, $bankOrder->order_amount, $bankOrder->order_s);
                                } else {
                                    TransactionTable::setRechargeAssignment(PaymentTypeTable::DEALER, BankTable::TDB, $bankOrder->bank_account, $bankOrder->order_id, $bankOrder->order_date, $bankOrder->order_p, $bankOrder->order_type, $bankOrder->order_amount, $bankOrder->order_s);
                                }
                            } else {
                                try {
                                    if ($ADshop) {
                                        TransactionTable::setDealerAssignment(PaymentTypeTable::DEALER_AD, BankTable::TDB, $bankOrder->bank_account, $bankOrder->order_id, $bankOrder->order_date, $bankOrder->order_p, $bankOrder->order_type, $bankOrder->order_amount, $bankOrder->order_s);
                                    } else {
                                        TransactionTable::setDealerAssignment(PaymentTypeTable::DEALER, BankTable::TDB, $bankOrder->bank_account, $bankOrder->order_id, $bankOrder->order_date, $bankOrder->order_p, $bankOrder->order_type, $bankOrder->order_amount, $bankOrder->order_s);
                                    }
                                } catch (Exception $e) {

                                }
                            }
                            if ($SD || $ADshop) {
                                $bankOrder->status = self::STAT_SUCCESS;
                                $bankOrder->save();
                            } else {
                                # Зарлага үүсгэх
                                $outcomeOrderId = self::reoutcome($bankOrder, $dealer, null, $dealerAgent, $chargeResult['percent']);
                                if ($outcomeOrderId) {
                                    $bankOrder->status = self::STAT_SUCCESS;
                                    $bankOrder->sales_order_id = $outcomeOrderId;
                                    $bankOrder->save();
                                    continue;
                                } else {
                                    $bankOrder->status = self::STAT_FAILED_OUTCOME;
                                    $bankOrder->save();
                                    self::notifyOperators($bankOrder);
                                    continue;
                                }
                            }
                        } else {
                            if ($chargeResult['error_code'] == self::STAT_FAILED_MAX_AMOUNT) {
                                $bankOrder->status = self::STAT_FAILED_MAX_AMOUNT;
                            } elseif ($chargeResult['error_code'] == self::STAT_FAILED_MIN_AMOUNT) {
                                $bankOrder->status = self::STAT_FAILED_MIN_AMOUNT;
                            } else {
                                $bankOrder->status = self::STAT_FAILED_CHARGE;
                            }
                            $bankOrder->save();
                            self::notifyOperators($bankOrder);
                            continue;
                        }
                    } else {
                        $bankOrder->status = self::STAT_FAILED_DEALER;
                        $bankOrder->save();
                        self::notifyOperators($bankOrder);
                        continue;
                    }
                } else {
                    if ($bankOrder->canReCharge() && $bankOrder->try_count < self::MAX_TRY_COUNT) {
                        $bankOrder->status = self::STAT_NEW;
                        $bankOrder->save();
                    }
                    //used to log here...
                }
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
            }
        }
        return TRUE;
    }

    /**
     * Дахин цэнэглэлт AD shop,SD
     *
     * @param $bankOrder
     * @param $type
     * @return boolean
     * @throws Doctrine_Manager_Exception
     */
    public static function rechargeSMSApi($bankOrder, $type)
    {
        if ($bankOrder instanceof BankTdb) {
            if (!$bankOrder->canReCharge()) {
                return FALSE;
            }
        } else {
            return FALSE;
        }
        $chargeResult = null;
        $pdo = Doctrine_Manager::connection()->getDbh();
        $sql = "UPDATE bankgw.bank_tdb
              SET status = '" . self::STAT_PROCESS . "'
              WHERE id = '" . $bankOrder['id'] . "'
              LIMIT 1";
        $affectedRows = $pdo->exec($sql);
        if ($affectedRows == 0) {
            return FALSE;
        }
        $bankOrder->status = self::STAT_PROCESS;
        $bankOrder->try_count++;

        # Цэнэглэлт хийх
        $logId = LogTools::setLogTdbCharge($bankOrder->id);
        $time = -time();
        if ($type == "SD") {
            $chargeResult = BaseSms::chargeSdDealer(str_replace("SD", "", $bankOrder->charge_mobile), $bankOrder->order_amount, 'TDB');
        } elseif ($type == "AD") {
            $chargeResult = BaseSms::chargeAdDealer($bankOrder->charge_mobile, $bankOrder->order_amount, 'TDB');
        }
        $time += time();
        LogTools::updateLogTdbCharge($logId, $chargeResult['log_request'], $chargeResult['log_response'], $time);

        if ($chargeResult['success'] == TRUE) {
            if ($type == "AD") {
                TransactionTable::setRechargeAssignment(PaymentTypeTable::DEALER_AD, BankTable::TDB, $bankOrder->bank_account, $bankOrder->order_id, $bankOrder->order_date, $bankOrder->order_p, $bankOrder->order_type, $bankOrder->order_amount, $bankOrder->order_s);
            } else {
                TransactionTable::setRechargeAssignment(PaymentTypeTable::DEALER, BankTable::TDB, $bankOrder->bank_account, $bankOrder->order_id, $bankOrder->order_date, $bankOrder->order_p, $bankOrder->order_type, $bankOrder->order_amount, $bankOrder->order_s);
            }
            # Цэнэглэгдсэн мөнгөн дүн хадгалах
            $bankOrder->charge_amount = $bankOrder->order_amount;
            $bankOrder->status = self::STAT_SUCCESS;
            $bankOrder->save();
            return TRUE;
        } else {
            if ($chargeResult['error_code'] == self::STAT_FAILED_MAX_AMOUNT) {
                $bankOrder->status = self::STAT_FAILED_MAX_AMOUNT;
            } elseif ($chargeResult['error_code'] == self::STAT_FAILED_MIN_AMOUNT) {
                $bankOrder->status = self::STAT_FAILED_MIN_AMOUNT;
            } else {
                $bankOrder->status = self::STAT_FAILED_CHARGE;
            }
            $bankOrder->save();
        }
        return false;
    }

    public static function notifyOperators($bankOrder)
    {
//        return FALSE;
//        $mailer = sfContext::getInstance()->getMailer();
//
//        $from = 's.alarm@ntc.mn';
//        $to = array('altantulga@mobicom.mn');
//        $subject = '[Dealer alarm] ' . $bankOrder->order_id;
//        $body = 'Сайн байна уу?<br><br>
//                Шалтгаан: <b>' . self::getStatusName($bankOrder->status, BankTdbTable::TYPE_DEALER) . '</b><br><br>
//                Дараах цэнэглэлт амжилтгүй боллоо:<br>
//                Гүйлгээний дугаар: <b>' . $bankOrder->order_id . '</b><br>
//                Дансны дугаар: <b>' . $bankOrder->bank_account . '</b><br>
//                Цэнэглэх дугаар: <b>' . $bankOrder->charge_mobile . '</b><br>
//                Тушаасан дүн: <b>' . $bankOrder->charge_amount . '</b><br>
//                Хуулганы огноо: <b>' . $bankOrder->order_date . '</b><br>';
//
//        $message = Swift_Message::newInstance()
//                ->setPriority(1)
//                ->setFrom($from, 'Dealer Alarm')
//                ->setSubject($subject)
//                ->setBody($body, 'text/html')
//                ->setTo($to);
//        try {
//            $res = $mailer->send($message);
//        } catch (Swift_TransportException $e) {
//            echo $e->getMessage();
//        }
//        LogTools::setLogEmail($subject, $body, $from, $to);
    }

    /**
     * Дахин зарлага хийх /борлуулалтын бүртгэл/
     *
     * @param BankTdb $bankOrder
     * @param array $dealer (code => string, alias => string, mobile => int, user_id => int, sale_percent_mtopup => int)
     * @param date $date
     * @param null $dealerAgent
     * @param int $percent
     * @return boolean
     */
    public static function reoutcome($bankOrder, $dealer, $date = null, $dealerAgent = null, $percent = 0)
    {
        if (!($bankOrder instanceof BankTdb)) {
            return FALSE;
        } elseif ($bankOrder->status == self::STAT_SUCCESS) {
            return FALSE;
        }

        if (!sizeof($dealer) && !sizeof($dealerAgent)) {
            return FALSE;
        }

        if (!$percent) {
            $percent = $bankOrder->percent;
        }
        if ($dealerAgent) {
            $outcomeUserId = BaseSms::DEALER_SYSTEM;
            $dealerCode = $dealerAgent['dealerCode'];
            $dealerAlias = $dealerAgent['locationDesc'];
            $dealerMobile = $bankOrder->charge_mobile;
        } else {
            $outcomeUserId = $dealer['user_id'];
            $dealerCode = $dealer['code'];
            $dealerMobile = $dealer['mobile'];
            $dealerAlias = $dealer['alias'];
        }

        $params = array(
            'vendor' => VendorTable::BANK_TDB,
            'outcomeDate' => $date,
            'percent' => $percent,
            'productPrice' => 1,
            'totalPrice' => $bankOrder->order_amount,
            'paid' => $bankOrder->order_amount,
            'customerName' => $dealerCode . ' ' . $dealerAlias,
            'customerPhone' => $dealerMobile,
            'outcomeUserId' => $outcomeUserId,
            'quantity' => $bankOrder->charge_amount,
            'vaucher' => $bankOrder->order_id,
            'comment' => $bankOrder->order_p,
            'discount' => $bankOrder->percent,
            'relationId' => $bankOrder->id,
        );
        LogTools::setSmsOutcomeParam(print_r($params, TRUE));
        return BaseSms::insertOutcomeAPI($params);
    }

    /**
     * Цэнэглэх хуулгууд
     * @param $account
     * @param int $limit
     * @return Doctrine_Collection
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function updateForCharge($account, $limit)
    {
        $whichLog = '';
        if($account == array(self::ACCOUNT_MOBINET_PAYMENT, self::ACCOUNT_CALLPAYMENT)){
            $whichLog = '/bankPaymentLog/tdb/bankPaymentLog_'.date('Y-m-d').'.log';
        }else if($account == array(self::ACCOUNT_PRODUCT_MOBINET)){
            $whichLog = '/bankPaymentHBB/tdb/bankPaymentHBB_'.date('Y-m-d').'.log';
        }
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') .$whichLog));
        $pdo = Doctrine_Manager::connection()->getDbh();
        // FOR UPDATE ажиллахын тулд AUTO COMMIT идэвхгүй байх ёстой
        $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);
        $pdo->beginTransaction();
        // Шинэ гүйлгээнүүдийн ID-г авч FOR UPDATE-р түгжинэ
        $ids = Doctrine_Query::create()
            ->select('id')
            ->from('BankTdb')
            ->where('created_at <= ?', date('Y-m-d H:i:s', time() - 10))
            ->andWhere('status = ?', self::STAT_NEW)
            ->andWhere('order_type = ?', '1')
            ->andWhereIn('bank_account', $account)
            ->limit($limit)
            ->forUpdate(true)
            ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        // Олдсон ID-нуудтай гүйлгээнүүдийн төлвийг PROCESS болгоно
        $logger->log('=====updateForCharge $ids: ' . print_r($ids, true), sfFileLogger::INFO);
        if ($ids) {
            Doctrine_Query::create()
                ->update('BankTdb')
                ->set('status', self::STAT_PROCESS)
                ->whereIn('id', $ids)
                ->execute();
            $pdo->commit();
            $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
            // Төлөв нь шинэчлэгдсэн гүйлгээнүүдээ буцаах
            $qSelect = Doctrine_Query::create()
                ->from('BankTdb')
                ->whereIn('id', $ids)
                ->orderBy('id ASC');
            $logger->log('=====updateForCharge Query:  '. $qSelect->getSQLQuery(), sfFileLogger::INFO);
            return $qSelect->execute();
        } else {
            $pdo->commit();
            $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
            return null;
        }
    }

    /**
     * Цэнэглэсэн хуулгуудыг TRANSACTION рүү зөөхөд ашиглав
     *
     * @param $pdo
     * @param int $limit
     * @return Doctrine_Collection
     * @throws Doctrine_Query_Exception
     */
    public static function updateForTransactions($pdo, $limit)
    {
        // FOR UPDATE ажиллахын тулд AUTO COMMIT идэвхгүй байх ёстой
        $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 0);
        $pdo->beginTransaction();
        $ids = Doctrine_Query::create()
            ->select('id')
            ->from('BankTdb')
            ->whereNotIn('status', array(self::STAT_PROCESS))
            ->andWhere('transfer_sap=?', 0)
            ->andWhere('created_at > ?', date('Y-m-d H:i:s', strtotime("-7 days")))
            ->andWhere('created_at <= ?', date('Y-m-d H:i:s', time() - 600))
            ->limit($limit)
            ->forUpdate(true)
            ->execute(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
        if($ids) {
            Doctrine_Query::create()
                ->update('BankTdb')
                ->set('transfer_sap', self::STAT_PROCESS)
                ->whereIn('id', $ids)
                ->execute();
            $pdo->commit();
            $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
            $qSelect = Doctrine_Query::create()
                ->from('BankTdb')
                ->whereIn('id', $ids);
            return $qSelect->execute();
        } else {
            $pdo->commit();
            $pdo->setAttribute(PDO::ATTR_AUTOCOMMIT, 1);
            return null;
        }
    }

    /**
     * Төлөлт оруулах
     *
     * @param null $bankOrder
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function callPayment($bankOrder = null, $limit = 50)
    {
        if ($bankOrder instanceof BankTdb) {
            if ($bankOrder->canReCharge()) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_CALLPAYMENT), $limit);
        }

        foreach ($bankOrderRows as $bankOrder) {
            try {
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }
                if ($bankOrder->status == self::STAT_PROCESS) {
                    $bankOrder->try_count++;

                    $logId = LogTools::setLogTdbChargeCallPayment($bankOrder->id);

                    $time = -time();
                    # төлөлт оруулах
                    $params = array(
                        'transDate' => date('Y-m-d', strtotime($bankOrder['order_date'])),
                        'amount' => $bankOrder['order_amount'],
                        'transValue' => $bankOrder['order_p'],
                        'transAccount' => $bankOrder['bank_account'],
                        'transType' => 'ADD',
                        'transNumber' => $bankOrder['order_id'],
                        'bankType' => VendorTable::BANK_TDB,
                    );
                    $chargeResult = CallPayment::charge($params);
                    $time += time();

                    LogTools::updateLogTdbChargeCallPayment($logId, $chargeResult['log_request'], $chargeResult['log_response'], $time);

                    if ($chargeResult['success'] == TRUE) {
                        # Цэнэглэгдсэн мөнгөн дүн болон хувийг хадгалах
                        $bankOrder->charge_amount = $bankOrder->order_amount;
                        $bankOrder->status = self::STAT_SUCCESS;
                        $bankOrder->save();
                    } else {
                        $bankOrder->status = self::STAT_FAILED_CHARGE;
                        $bankOrder->save();
                        continue;
                    }
                } else {
                    if ($bankOrder->canReCharge() && $bankOrder->try_count < self::MAX_TRY_COUNT) {
                        $bankOrder->status = self::STAT_NEW;
                        $bankOrder->save();
                    }
                    //used to log here...
                }
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
            }
        }

        return TRUE;
    }

    /**
     *
     * /**
     * Checks if a dealer has charged with exact same amount on a same day.
     * @param $dealerNumber
     * @param $amount
     * @param $date
     * @return Doctrine_Collection
     * @throws Doctrine_Query_Exception
     */
    public static function isDuplicatedToday($dealerNumber, $amount, $date)
    {
        return Doctrine_Query::create()
                        ->from('BankTdb')
                        ->where('charge_mobile = ?', $dealerNumber)
                        ->andWhere('charge_amount = ?', $amount)
                        ->andWhere('order_date = ?', $date)
                        ->andWhereIn('status', array(self::STAT_SUCCESS))
                        ->execute();
    }

    public static function object_to_array($data)
    {

        if ((!is_array($data)) and ( !is_object($data)))
            return 'xxx'; //$data;       

        $result = array();

        $data = (array) $data;

        foreach ($data as $key => $value) {

            if (is_object($value))
                $value = (array) $value;

            if (is_array($value))
                $result[$key] = object_to_array($value);
            else
                $result[$key] = $value;
        }

        return $result;
    }

    /**
     * Checks if a dealer has charged with exact same amount on a same day.
     * @param int $limit
     * @return void
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function setAssignment($limit)
    {
        $pdo = Doctrine_Manager::connection()->getDbh();
        $transactions = self::updateForTransactions($pdo, $limit);
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/transaction/tdb/transfer_'.date('Y-m-d').'.log'));
        $ids = array();
        foreach ($transactions as $transaction) {
            if ($transaction->status == self::STAT_SUCCESS) {
                # odoogoor zuvkhun dealer charge deer l sales uusgej abigaa uchir shalgav
                if ($transaction->sales_order_id) {
                    $dealerChargeType = PaymentTypeTable::DEALER;
                } elseif (BaseSms::isSdDealer($transaction->order_p) && in_array($transaction->bank_account, array(self::ACCOUNT_DEALER, self::ACCOUNT_DEALER_MOBICOM))) {
                    $dealerChargeType = PaymentTypeTable::DEALER_SD;
                } elseif (BaseSms::isAdShop($transaction->order_p) && in_array($transaction->bank_account, array(self::ACCOUNT_DEALER, self::ACCOUNT_DEALER_MOBICOM))) {
                    $dealerChargeType = PaymentTypeTable::DEALER_AD;
                } else {
                    $dealerChargeType = 0;
                }
            } else {
                $dealerChargeType = 0;
            }
            $orderType = $transaction->order_type;
            if ($orderType == 1) {
                //$orderType = 'ADD';
            } elseif ($orderType == 0) {
                $orderType = 'SUB';
            }
            # assignment 
            try {
                $ids[] = $transaction->id;
                $result = TransactionTable::setDealerAssignment($dealerChargeType, BankTable::TDB, $transaction->bank_account, $transaction->order_id, $transaction->order_date, $transaction->order_p, $orderType, $transaction->order_amount, $transaction->order_s);
                $logger->log('TDBBANK' . $transaction->order_id, sfFileLogger::INFO);
            } catch (Exception $exc) {
                $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/dealerTransaction.log'));
                $logger->log($transaction->order_id . 'TDBBANK' . $exc->getMessage(), sfFileLogger::ERR);
            }
        }
        if (count($ids)) {
            try {
                # transwered
                $sql = "UPDATE bankgw.bank_tdb
              SET transfer_sap = 1
              WHERE id IN(" . implode(',', $ids) . ")
              ";
                $pdo->exec($sql);
            } catch (Exception $exc) {
                $logger->log('TDBBANK-UPDATE-' . '[' . $sql . ']' . $exc->getMessage(), sfFileLogger::ERR);
            }
        }
    }

    /**
     * Гүйлгээний утгаас гэрээний дугаарыг олж,
     * Биллийн мэдээллийг татаж bankpayment table -д оруулах
     * CX рүү оруулах төлөлтүүд
     * @param Object $bankOrder
     * @param Boolean $redirectCall (Postpaid tulult bish bol Prepaid shiljuuleh)
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function bankPayment($bankOrder = null, $redirectCall = null, $limit = 50)
    {
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/bankPaymentLog/tdb/bankPaymentLog_'.date('Y-m-d').'.log'));
        $logger->log('============Started bankPayment TDB================', sfFileLogger::INFO);
        if ($bankOrder instanceof BankTdb) {
            if ($bankOrder->canReCharge()) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_MOBINET_PAYMENT, self::ACCOUNT_CALLPAYMENT), $limit);
        }
        $logger->log('Total count: ' . count($bankOrderRows), sfFileLogger::INFO);
        echo 'bankPayment count: '.count($bankOrderRows).'</br>';
        $count = 0;
        if(count($bankOrderRows)>0){
        foreach ($bankOrderRows as $bankOrder) {
            try {
                $count++;
                $bill = $phoneNumber = $contractNumber = $contractName = $statusComment = null;
                $contractAmount = $billCycle = $paymentCode = 0;
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }
                $logger->log($bankOrder->order_id . ' count: '.$count, sfFileLogger::INFO);
                $logger->log('Order Id: '.$bankOrder->order_id . ', Guilgeenii utga: ' . $bankOrder->order_p, sfFileLogger::INFO);

                $numbers = array();
                $matches = array();
                # mobile bankaar shiljuulsen dugaariig avch hayah
                $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $bankOrder->order_p);
                # Утасны дугаар, гэрээний дугаараас урт тоог хасах
                $txnDesc = preg_replace("/[0-9]{9,}/", "", $txnDesc);
                //preg_match_all("/[0-9]+/", $txnDesc, $matches);
                preg_match_all("/([9][954][0-9]{6})|(85[0-9]{6})|(591[0-9]{5})|([7][75][0-9]{6})|(633[0-9]{5})|([12346][0-9]{7})/", $txnDesc, $matches);
                foreach ($matches as $numberArr) {
                    foreach ($numberArr as $number) {
                        $numbers[] = trim($number);
                    }
                    break;
                }
                $type = 0;
                if ($bankOrder->getBankAccount() == self::ACCOUNT_CALLPAYMENT) {
                    $type = BankpaymentTable::TYPE_CALL_PAYMENT;
                    $limit = sfConfig::get('app_bankpayment_gsm_limit');
                } elseif (in_array($bankOrder->getBankAccount(), array(self::ACCOUNT_MOBINET_PAYMENT, self::ACCOUNT_PRODUCT_MOBINET))) {
                    $type = BankpaymentTable::TYPE_MOBINET;
                    $limit = sfConfig::get('app_bankpayment_nsl_limit');
                } else {
                    continue;
                }
                $contractNumbers = $phoneNumbers = array();
                foreach ($numbers as $number) {
                    $number = trim($number);
                    if ($number) {
                        if (AppTools::isContractNumber($number)) {
                            if (AppTools::isNumberVoo($number)) {
                                $phoneNumbers[] = $number;
                            }else{
                                $contractNumbers[] = $number;
                            }
                        }
                        if ($type == BankpaymentTable::TYPE_CALL_PAYMENT) {
                            if (AppTools::isNumber($number) || AppTools::isMobinetHHB($number)) {
                                $phoneNumbers[] = $number;
                            }
                        } else if (AppTools::isNumberMobinet($number)) {
                            $phoneNumbers[] = $number;
                            break;
                        }
                    }
                }
                $phoneNumbers = array_unique($phoneNumbers);
                $contractNumbers = array_unique($contractNumbers);
                # guilgeenii utgaas gereenii dugaar,utasnii dugaar oldoogui bol mobile banknii dugaar shalgah
                if ($type == BankpaymentTable::TYPE_CALL_PAYMENT && count($contractNumbers) == 0 && count($phoneNumbers) == 0) {
                    preg_match("/\([0-9]{8}\)/", $bankOrder->order_p, $matches);
                    foreach ($matches as $numberArr) {
                        if (AppTools::isNumber(trim($numberArr, '()'))) {
                            $phoneNumbers[] = trim($numberArr, '()');
                        }
                        break;
                    }
                }
                $insertBankpayment = false;
                if (count($contractNumbers) == 1 || count($phoneNumbers) == 1) {
                    $phoneNumber = isset($phoneNumbers[0]) ? $phoneNumbers[0] : 0;
                    $contractNumber = isset($contractNumbers[0]) ? $contractNumbers[0] : 0;
                    if ($phoneNumber) {
                        $logger->log($bankOrder->order_id .', PhoneNumber: ' . $phoneNumber, sfFileLogger::INFO);
                        $bill = PostGateway::getBillInfo($phoneNumber);
                        // VOO dugaar bol billInfo gereegeer duudah
                        if(AppTools::isNumberVoo($phoneNumber)){
                            $phoneInfo = PostGateway::getPostPhoneInfo($phoneNumber); 
                            $logger->log($bankOrder->order_id . ' PostGateway::getPostPhoneInfo:$result: '. print_r($phoneInfo, true), sfFileLogger::INFO);
                            $contractNumber = $phoneInfo['AccountNo'];
                            $bill = PostGateway::getBillInfo(0, $contractNumber);
                            $logger->log($bankOrder->order_id . ' VOO $contractNumber: '. $contractNumber, sfFileLogger::INFO);
                        } 
                    } else if ($contractNumber) {
                        $logger->log($bankOrder->order_id .', ContractNumber: ' . $contractNumber, sfFileLogger::INFO);
                        $bill = PostGateway::getBillInfo(0, $contractNumber);
                    }
                    $logger->log($bankOrder->order_id . ' $bill: ' . print_r($bill, true), sfFileLogger::INFO);
                    if ($bill) {
                        if ($bill['Code'] === "0") {
                            $logger->log($bankOrder->order_id .' Not postpaid number.', sfFileLogger::INFO);
                            if ($contractNumber && $phoneNumbers && $bill['AccountNo'] !== $contractNumber) {
                                $statusComment = "Гэрээний дугаар зөрүүтэй";
                                $phoneNumber = $contractNumber = '';
                                $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                            } else {
                                $contractNumber = $bill['AccountNo'];
                                $billCycle = $bill['BillCycleCode'];
                                $contractAmount = doubleval($bill['CurrentBalance']);
                                $accountInfo = PostGateway::getAccountInfo($contractNumber);
                                $contractName = $accountInfo['AccountName'];
                                if (floatval(strval($contractAmount - $limit)) <= floatval(strval($bankOrder->order_amount)) &&
                                    floatval(strval($bankOrder->order_amount)) <= floatval(strval($contractAmount + $limit))) {
                                    $status = BankpaymentTable::STAT_NEW;
                                } else {
                                    $status = BankpaymentTable::STAT_BANKPAYMENT_AMOUNT;
                                }
                            }
                        } else {
                            $statusComment = $bill['Info'];
                            $status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                        }
                    } elseif ($contractNumber) {
                        $status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                    } else {
                        $statusComment = "Bill info not ";
                        $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                        $logger->log($bankOrder->order_id . ' $statusComment' . $statusComment, sfFileLogger::INFO);
                    }
                } elseif (count($contractNumbers) == 0 && count($phoneNumbers) == 0) {
                    $statusComment = "Гүйлгээний утга буруу";
                    $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                // Олон дугаартай үед нэг гэрээний дугаартай эсэхийг шалгах
                } elseif (count($phoneNumbers) > 1) {
                    $success = 1;
                    $accountNos = array();
                    foreach ($phoneNumbers as $phoneNumber) {
                        var_dump($phoneNumber);
                        $bill = PostGateway::getBillInfo($phoneNumber);
                        if ($bill) {
                            if ($bill['Code'] === "0") {
                                $accountNos[] = $bill['AccountNo'];
                                $billCycle = $bill['BillCycleCode'];
                                $contractAmount = doubleval($bill['CurrentBalance']);
                            } else {
                                $success = 0;
                            }
                        } else {
                            $success = 0;
                        }
                    }
                    if ($success) {
                        $contractNumbers = array_unique($accountNos);
                        if (count($contractNumbers) > 1) {
                            $statusComment = "Олон дугаартай";
                            $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                            $contractAmount = 0;
                            $contractName = '-';
                        } else {
                            $contractNumber = $contractNumbers[0];
                            $accountInfo = PostGateway::getAccountInfo($contractNumber);
                            $contractName = $accountInfo['AccountName'];
                            if (floatval(strval($contractAmount - $limit)) <= floatval(strval($bankOrder->order_amount)) &&
                                floatval(strval($bankOrder->order_amount)) <= floatval(strval($contractAmount + $limit))) {
                                $status = BankpaymentTable::STAT_NEW;
                            } else {
                                $status = BankpaymentTable::STAT_BANKPAYMENT_AMOUNT;
                            }
                            $phoneNumber = $phoneNumbers[0];
                        }
                    } else {
                        $statusComment = "Олон дугаартай";
                        $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                    }
                } else {
                    $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                }
                # Hereglegch oldohgui bol HBB shalgah
                if (!in_array($status, array(BankpaymentTable::STAT_NEW, BankpaymentTable::STAT_BANKPAYMENT_AMOUNT))) {
                    if ($redirectCall) {
                        return false;
                    } else {
                        # Guilgeenii utgaas medeelel oldoogui bol HBB Prepaid tulult shalgah
                        $insertBankpayment = self::bankPaymentHBB($bankOrder, TRUE);
                    }
                }

                $logger->log($bankOrder->order_id . ' $status: ' . $status.' $statusComment: ' . $statusComment, sfFileLogger::INFO);
                # burtgeegui bol burtgeh
                if (!$insertBankpayment) {
                    $logger->log($bankOrder->order_id . ' Bankpaymentruu burtgeh', sfFileLogger::INFO);
                    $data = array();
                    $data['vendor_id'] = VendorTable::BANK_TDB;
                    $data['bank_order_id'] = $bankOrder->id;
                    $data['type'] = $type;
                    $data['status'] = $status;
                    $data['status_comment'] = $statusComment;
                    $data['number'] = $phoneNumber;
                    $data['contract_number'] = $contractNumber;
                    $data['contract_name'] = $contractName;
                    $data['bill_cycle'] = $billCycle;
                    $data['contract_amount'] = $contractAmount;
                    $data['credit_control'] = 123;
                    BankpaymentTable::insert($data);
                    $bankOrder->status = BankpaymentTable::STAT_SUCCESS;
                    $bankOrder->save();
                    unset($bankOrder);
                }
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
                $logger->log('Error: '.$bankOrder->order_id .' Error message: '.$ex->getMessage(), sfFileLogger::ERR);
            }
        }
        }
        $logger->log('============Ended bankPayment TDB================', sfFileLogger::INFO);
        
        return TRUE;
    }

    /**
     * Payment code
     * @param $account
     * @return int|string
     */
    public static function getPaymentCode($account)
    {
        $code = 0;
        switch ($account) {
            case self::ACCOUNT_MOBINET_PAYMENT:
                $code = 'BNKN3';
                break;
            case self::ACCOUNT_CALLPAYMENT:
                $code = 'BNKSA';
                break;
            case self::ACCOUNT_PRODUCT_MOBINET:
                $code = 'CNK7R';
                break;
            default:
                break;
        }
        return $code;
    }

    /**
     * Улуснэтийн төлөлтийн дансны гүйлгээнүүдийг
     *  bankpayment table -д оруулах
     * @param object bank
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function bankPaymentUlusnet($bankOrder = null, $limit = 50)
    {
        if ($bankOrder instanceof BankTdb) {
            if ($bankOrder->canReCharge()) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_PRODUCT_ULUSNET), $limit);
        }

        foreach ($bankOrderRows as $bankOrder) {
            try {
                $contractNumber = $contractName = null;
                $contractAmount = $billCycle = $paymentCode = 0;
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }

                $phoneNumber = BankpaymentTable::findPhoneNumber($bankOrder->order_p, BankpaymentTable::TYPE_ULUSNET);

                if ($phoneNumber) {
                    $accountInfo = PostGateway::getPostPhoneInfo($phoneNumber);
                    if ($accountInfo && $accountInfo['Code'] === "0") {
                        $contractNumber = $accountInfo['AccountNo'];
                        $contractName = $accountInfo['AccountName'];
                        $status = BankpaymentTable::STAT_NEW;
                    }
                } else {
                    $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                }

                $data = array();
                $data['vendor_id'] = VendorTable::BANK_TDB;
                $data['bank_order_id'] = $bankOrder->id;
                $data['type'] = BankpaymentTable::TYPE_ULUSNET;
                $data['status'] = $status;
                $data['number'] = $phoneNumber;
                $data['contract_number'] = $contractNumber;
                $data['contract_name'] = $contractName;
                $data['bill_cycle'] = $billCycle;
                $data['contract_amount'] = $contractAmount;
                $data['credit_control'] = 123;

                BankpaymentTable::insert($data);
                $bankOrder->status = self::STAT_SUCCESS;
                $bankOrder->save();
                unset($bankOrder);
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
            }
        }

        return TRUE;
    }

    /**
     * Мобинэт HBB prepaid төлөлтийн дансны гүйлгээнүүдийг
     *  дамжуулах
     * @param null $bankOrder
     * @param Boolean $redirectCall (Prepaid tulult bish bol Postruu shiljuuleh)
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function bankPaymentHBB($bankOrder = null, $redirectCall = null, $limit = 50)
    {
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/bankPaymentHBB/tdb/bankPaymentHBB_'.date('Y-m-d').'.log'));
        $logger->log('============Started bankPaymentHBB TDB================', sfFileLogger::INFO);

        if ($bankOrder instanceof BankTdb) {
            if ($bankOrder->canReCharge()) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_PRODUCT_MOBINET), $limit);
        }
        $logger->log('Total count: ' . count($bankOrderRows), sfFileLogger::INFO);
        $count = 0;
        echo 'bankPaymentHBB count =>'.count($bankOrderRows).'</br>';
        if(count($bankOrderRows)>0){
        foreach ($bankOrderRows as $bankOrder) {
            try {
                $count++;
                $contractNumber = $contractName = null;
                $contractAmount = $billCycle = $paymentCode = 0;
                $username = $contractName = '';
                $logger->log($bankOrder->order_id . ' count: '.$count, sfFileLogger::INFO);
                $logger->log('Order Id: '.$bankOrder->order_id . ', Guilgeenii utga: ' . $bankOrder->order_p, sfFileLogger::INFO);
                $logger->log($bankOrder->order_id . ' status: ' . $bankOrder->status, sfFileLogger::INFO);
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }
                $logger->log($bankOrder->order_id . ' status1:' . $bankOrder->status, sfFileLogger::INFO);
                $insertBankpayment = false;
                # MOBINET WIGI shalgah
                $wifiRegex = "/WIFI-(([9][954][0-9]{6})|(85[0-9]{6}))-([0-9_a-zA-Z]{1,20})-*/";
                if (preg_match($wifiRegex, $bankOrder->order_p, $matches)) {
                    $logger->log('--WIFI--=', sfFileLogger::INFO);
                    $type = BankpaymentTable::TYPE_WIFI;
                    $phoneNumber = $matches[1];
                    $card = $matches[4];
                    $username = $phoneNumber;
                    # TEST hiih dugaaruudiig l zuvshuuruv
                    //if (in_array($phoneNumber, array('94300074', '94300115'))) {
                    $result = WifiOnlineGateway::chargeCard($phoneNumber, $card, "bankgw_tdb");
                    //}
                    if (isset($result['Code']) && $result['Code'] == 0) {
                        $status = BankpaymentTable::STAT_SUCCESS;
                    } else {
                        $statusComment = "Амжилтгүй(" . $result ['Info'] . ")";
                        $status = BankpaymentTable::STAT_FAILED_CHARGE;
                    }
                } elseif (self::bankPaymentVOO($bankOrder)) {
                    $logger->log('--VOO--=', sfFileLogger::INFO);
                    //herevee VOO giin tulult bol algasay
                    $type = BankpaymentTable::TYPE_MOBINET;
                    continue;
                } else {
                    $keyword = BankpaymentTable::findHbbContract($bankOrder->order_p);
                    if (!$keyword) {
                        $keyword = BankpaymentTable::findHbbUsername($bankOrder->order_p);
                    }
                    $logger->log($bankOrder->order_id . ' $keyword:' . $keyword, sfFileLogger::INFO);

                    $type = BankpaymentTable::TYPE_MOBINET_PREPAID;
                    $speed = 0;
                    if ($keyword) {
                        $accountInfo = MobinetGateway::contractInfo($keyword);
                        $logger->log($bankOrder->order_id . ' $accountInfo:' . print_r($accountInfo, true), sfFileLogger::INFO);

                        if (isset($accountInfo['id']) && $accountInfo['id']) {
                            if (AppTools::isPostHbbContract($accountInfo['contract'])) {
                                $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                                #haigaad oldson geree, username-iig shalgah
                            } else {
                                $contractNumber = $accountInfo['contract'];
                                $username = $accountInfo['username'];
                                $speed = $accountInfo['speed'];
                                $contractName = $accountInfo['lastname'] . ' ' . $accountInfo['firstname'];
                                $status = BankpaymentTable::STAT_NEW;
                                unset($accountInfo);
                            }
                        } else {
                            $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                        }
                    } else {
                        $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                    }
                }
                $logger->log($bankOrder->order_id . ' status2:' . $bankOrder->status, sfFileLogger::INFO);
                if ($status == BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE) {

                }
                # Hereglegch oldohgui bol HBB shalgah
                if ($status !== BankpaymentTable::STAT_NEW) {
                    $logger->log($bankOrder->order_id . ' status3:' . $bankOrder->status, sfFileLogger::INFO);
                    if ($redirectCall) {
                        return false;
                    } else {
                        # Guilgeenii utgaas medeelel oldoogui bol Postpaid tulult shalgah
                        $insertBankpayment = self::bankPayment($bankOrder, TRUE);
                    }
                }
                $logger->log($bankOrder->order_id . ' status4:' . $bankOrder->status, sfFileLogger::INFO);

                if (!$insertBankpayment) {
                    $logger->log($bankOrder->order_id . ' status5:' . $bankOrder->status, sfFileLogger::INFO);
                    try {
                        $data = array();
                        $data['vendor_id'] = VendorTable::BANK_TDB;
                        $data['bank_order_id'] = $bankOrder->id;
                        $data['type'] = $type;
                        $data['status'] = $status;
                        $data['number'] = $username;
                        $data['contract_number'] = $contractNumber;
                        $data['contract_name'] = $contractName;
                        $data['contract_amount'] = $contractAmount;

                        $bankpayment = BankpaymentTable::insert($data);
                        if ($bankpayment && $type = BankpaymentTable::TYPE_MOBINET_PREPAID) {
                            BankpaymentMobinetTable::insert($bankpayment->id, $speed);
                        }
                        $bankOrder->status = self::STAT_SUCCESS;
                        $bankOrder->save();
                    } catch (Exception $exc) {
                        $logger->log('$insertHBBBankpayment TDB Error: '.$bankOrder->order_id .' Error message: '.$exc, sfFileLogger::ERR);
                    }
                }

                unset($bankOrder);
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
                $logger->log($bankOrder->order_id . ' Error: ' . $ex, sfFileLogger::INFO);
            }
        }
        }
        $logger->log('============Ended bankPaymentHBB TDB================', sfFileLogger::INFO);
        return TRUE;
    }
    
    /**
     * Гүйлгээний утгаас VOO дугаарыг олж,
     * Биллийн мэдээллийг татаж bankpayment table -д оруулах
     * CX рүү оруулах төлөлтүүд
     * @param Object $bankOrder
     * @param Boolean $redirectCall (Postpaid tulult bish bol Prepaid shiljuuleh)
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function bankPaymentVOO($bankOrder = null, $redirectCall = null, $limit = 50)
    {
        if (!($bankOrder instanceof BankTdb)) {
            return FALSE;
        }
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/bankPaymentHBB/tdb/bankPaymentHBB_'.date('Y-m-d').'.log'));
        try {
            $bill = $phoneNumber = $contractNumber = $contractName = $statusComment = null;
            $contractAmount = $billCycle = $paymentCode = 0;
            $logger->log($bankOrder->order_id . ' CxPayment:TDB VOO', sfFileLogger::INFO);
            $numbers = array();
            $matches = array();
            $logger->log($bankOrder->order_id . ' order_p: ' . $bankOrder->order_p, sfFileLogger::INFO);
            # mobile bankaar shiljuulsen dugaariig avch hayah
            $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $bankOrder->order_p);
            # Утасны дугаар, гэрээний дугаараас урт тоог хасах
            $txnDesc = preg_replace("/[0-9]{9,}/", "", $txnDesc);
            //preg_match_all("/[0-9]+/", $txnDesc, $matches);
            preg_match_all("/(491[0-9]{5})/", $txnDesc, $matches);
            foreach ($matches as $numberArr) {
                foreach ($numberArr as $number) {
                    $numbers[] = trim($number);
                }
                break;
            }
            $type = BankpaymentTable::TYPE_MOBINET;
            $phoneNumbers = array_unique($numbers);
            $logger->log($bankOrder->order_id . ' $phoneNumbers: ' . print_r($phoneNumbers, true), sfFileLogger::INFO);

            $insertBankpayment = false;
            if (count($phoneNumbers) == 1) {
                $phoneNumber = isset($phoneNumbers[0]) ? $phoneNumbers[0] : 0;
                if (!AppTools::isNumberVoo($phoneNumber)) {
                    return false;
                }
                $insertBankpayment = true;
                $logger->log($bankOrder->order_id . ' $phoneNumber' . $phoneNumber, sfFileLogger::INFO);
                if ($phoneNumber) {
                    $bill = PostGateway::getBillInfo($phoneNumber);
                }
                $logger->log($bankOrder->order_id . ' $bill:> ' . print_r($bill, true), sfFileLogger::INFO);
                if ($bill) {
                    if ($bill['Code'] === "0") {
                        $contractNumber = $bill['AccountNo'];
                        $billCycle = $bill['BillCycleCode'];
                        $contractAmount = doubleval($bill['CurrentBalance']);
                        $accountInfo = PostGateway::getAccountInfo($contractNumber);
                        $contractName = $accountInfo['AccountName'];
                        if (floatval(strval($contractAmount - $limit)) <= floatval(strval($bankOrder->order_amount)) &&
                                floatval(strval($bankOrder->order_amount)) <= floatval(strval($contractAmount + $limit))) {
                            $status = BankpaymentTable::STAT_NEW;
                        } else {
                            $status = BankpaymentTable::STAT_BANKPAYMENT_AMOUNT;
                        }
                    } else {
                        $statusComment = $bill['Info'];
                        $status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                    }
                } else {
                    $statusComment = "Bill info not ";
                    $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                    $logger->log($bankOrder->order_id . ' $statusComment' . $statusComment, sfFileLogger::INFO);
                }
                $logger->log($bankOrder->order_id . ' $status: ' . $status. ' $statusComment: ' . $statusComment, sfFileLogger::INFO);
            } else {
                return false;
            }
            # burtgeegui bol burtgeh
            if ($insertBankpayment) {
                $logger->log($bankOrder->order_id . ' burtgeh', sfFileLogger::INFO);
                $data = array();
                $data['vendor_id'] = VendorTable::BANK_TDB;
                $data['bank_order_id'] = $bankOrder->id;
                $data['type'] = $type;
                $data['status'] = $status;
                $data['status_comment'] = $statusComment;
                $data['number'] = $phoneNumber;
                $data['contract_number'] = $contractNumber;
                $data['contract_name'] = $contractName;
                $data['bill_cycle'] = $billCycle;
                $data['contract_amount'] = $contractAmount;
                $data['credit_control'] = 123;
                BankpaymentTable::insert($data);
                $bankOrder->status = BankpaymentTable::STAT_SUCCESS;
                $bankOrder->save();
                unset($bankOrder);
                return true;
            }
        } catch (\Exception $ex) {
            $logger->log($bankOrder->order_id . ' Error: '. $ex->getMessage(), sfFileLogger::ERR);
            return false;
        }
        return false;
    }

    public static function retrieveByTran($order_id, $order_type, $order_amount, $order_date)
    {
        $q = Doctrine_Query::create()
                ->from('BankTdb')
                ->where('order_id = ?', $order_id)
                ->addWhere('order_type = ?', $order_type)
                ->addWhere('order_amount = ?', $order_amount)
                ->addWhere('order_date = ?', $order_date);

        return $q->fetchOne();
    }
    
    public static function bankPaymentFromTransaction($bankOrder = null, $redirectCall = null, $limit = 50)
    {
        $logger = new sfFileLogger(new sfEventDispatcher(), array('file' => sfConfig::get('sf_log_dir') . '/bankPaymentFromTransaction/tdb/bankPaymentFromTransaction_'.date('Y-m-d').'.log'));
        $logger->log('============Started bankPaymentFromTransaction TDB================', sfFileLogger::INFO);
        if ($bankOrder instanceof BankTdb) {
            if ($bankOrder->canReCharge()) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_MOBINET_PAYMENT, self::ACCOUNT_CALLPAYMENT), $limit);
        }
        $logger->log('Total count: ' . count($bankOrderRows), sfFileLogger::INFO);
        echo 'bankPaymentFromTransaction count: '.count($bankOrderRows).'</br>';
        $count = 0;
        if(count($bankOrderRows)>0){
        foreach ($bankOrderRows as $bankOrder) {
            try {
                $bill = $phoneNumber = $contractNumber = $contractName = $statusComment = null;
                $contractAmount = $billCycle = $paymentCode = 0;
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }
                $logger->log($bankOrder->order_id . ' count: '.$count, sfFileLogger::INFO);
                $logger->log('Order Id: '.$bankOrder->order_id . ', Guilgeenii utga: ' . $bankOrder->order_p, sfFileLogger::INFO);

                $numbers = array();
                $matches = array();
                $logger->log($bankOrder->order_id . ' order_p' . $bankOrder->order_p, sfFileLogger::INFO);
                # mobile bankaar shiljuulsen dugaariig avch hayah
                $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $bankOrder->order_p);
                # Утасны дугаар, гэрээний дугаараас урт тоог хасах
                $txnDesc = preg_replace("/[0-9]{9,}/", "", $txnDesc);
                //preg_match_all("/[0-9]+/", $txnDesc, $matches);
                preg_match_all("/([9][954][0-9]{6})|(85[0-9]{6})|(591[0-9]{5})|([7][75][0-9]{6})|(633[0-9]{5})|([12346][0-9]{7})/", $txnDesc, $matches);
                foreach ($matches as $numberArr) {
                    foreach ($numberArr as $number) {
                        $numbers[] = trim($number);
                    }
                    break;
                }
                $type = BankpaymentTable::TYPE_CALL_PAYMENT;
                if ($bankOrder->getBankAccount() == self::ACCOUNT_CALLPAYMENT) {
                    $type = BankpaymentTable::TYPE_CALL_PAYMENT;
                    $limit = sfConfig::get('app_bankpayment_gsm_limit');
                } elseif (in_array($bankOrder->getBankAccount(), array(self::ACCOUNT_MOBINET_PAYMENT, self::ACCOUNT_PRODUCT_MOBINET))) {
                    $type = BankpaymentTable::TYPE_MOBINET;
                    $limit = sfConfig::get('app_bankpayment_nsl_limit');
                }
                $contractNumbers = $phoneNumbers = array();
                foreach ($numbers as $number) {
                    $number = trim($number);
                    if ($number) {
                        if (AppTools::isContractNumber($number)) {
                            $contractNumbers[] = $number;
                        }
                        if ($type == BankpaymentTable::TYPE_CALL_PAYMENT) {
                            if (AppTools::isNumber($number) || AppTools::isMobinetHHB($number)) {
                                $phoneNumbers[] = $number;
                            }
                        } else if (AppTools::isNumberMobinet($number)) {
                            $phoneNumbers[] = $number;
                            break;
                        }
                    }
                }
                $logger->log($bankOrder->order_id . ' $phoneNumbers', sfFileLogger::INFO);
                $phoneNumbers = array_unique($phoneNumbers);
                $contractNumbers = array_unique($contractNumbers);
                # guilgeenii utgaas gereenii dugaar,utasnii dugaar oldoogui bol mobile banknii dugaar shalgah
                if ($type == BankpaymentTable::TYPE_CALL_PAYMENT && count($contractNumbers) == 0 && count($phoneNumbers) == 0) {
                    preg_match("/\([0-9]{8}\)/", $bankOrder->order_p, $matches);
                    foreach ($matches as $numberArr) {
                        if (AppTools::isNumber(trim($numberArr, '()'))) {
                            $phoneNumbers[] = trim($numberArr, '()');
                        }
                        break;
                    }
                }
                $insertBankpayment = false;
                if (count($contractNumbers) == 1 || count($phoneNumbers) == 1) {
                    $phoneNumber = isset($phoneNumbers[0]) ? $phoneNumbers[0] : 0;
                    $contractNumber = isset($contractNumbers[0]) ? $contractNumbers[0] : 0;
                    if ($phoneNumber) {
                        $logger->log($bankOrder->order_id .', $phoneNumber: ' . $phoneNumber, sfFileLogger::INFO);
                        $bill = PostGateway::getBillInfo($phoneNumber);
                    } else if ($contractNumber) {
                        $bill = PostGateway::getBillInfo(0, $contractNumber);
                        $logger->log($bankOrder->order_id .', $contractNumber: ' . $contractNumber, sfFileLogger::INFO);
                    }
                    $logger->log($bankOrder->order_id . ' $bill: ' . print_r($bill, true), sfFileLogger::INFO);
                    if ($bill) {
                        if ($bill['Code'] === "0") {
                            if ($contractNumber && $phoneNumbers && $bill['AccountNo'] !== $contractNumber) {
                                $statusComment = "Гэрээний дугаар зөрүүтэй";
                                $phoneNumber = $contractNumber = '';
                                $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                            } else {
                                $contractNumber = $bill['AccountNo'];
                                $billCycle = $bill['BillCycleCode'];
                                $contractAmount = doubleval($bill['CurrentBalance']);
                                $accountInfo = PostGateway::getAccountInfo($contractNumber);
                                $contractName = $accountInfo['AccountName'];
                                if (floatval(strval($contractAmount - $limit)) <= floatval(strval($bankOrder->order_amount)) &&
                                    floatval(strval($bankOrder->order_amount)) <= floatval(strval($contractAmount + $limit))) {
                                    $status = BankpaymentTable::STAT_NEW;
                                } else {
                                    $status = BankpaymentTable::STAT_BANKPAYMENT_AMOUNT;
                                }
                            }
                        } else {
                            $statusComment = $bill['Info'];
                            $status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                        }
                    } elseif ($contractNumber) {
                        $status = BankpaymentTable::STAT_FAILED_BILL_INFO;
                    } else {
                        $statusComment = "Bill info not ";
                        $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                        $logger->log($bankOrder->order_id . ' $statusComment' . $statusComment, sfFileLogger::INFO);
                    }
                } elseif (count($contractNumbers) == 0 && count($phoneNumbers) == 0) {
                    $statusComment = "Гүйлгээний утга буруу";
                    $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                } else {
                    $statusComment = "Олон дугаартай";
                    $status = BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE;
                }
                # Hereglegch oldohgui bol HBB shalgah
                if (!in_array($status, array(BankpaymentTable::STAT_NEW, BankpaymentTable::STAT_BANKPAYMENT_AMOUNT))) {
                    if ($redirectCall) {
                        return false;
                    } else {
                        # Guilgeenii utgaas medeelel oldoogui bol HBB Prepaid tulult shalgah
                        $insertBankpayment = self::bankPaymentHBB($bankOrder, TRUE);
                    }
                }

                $logger->log($bankOrder->order_id . ' $status: ' . $status.' $statusComment: ' . $statusComment, sfFileLogger::INFO);
                # burtgeegui bol burtgeh
                if (!$insertBankpayment) {
                    $logger->log($bankOrder->order_id . ' burtgeh', sfFileLogger::INFO);
                    $data = array();
                    $data['vendor_id'] = VendorTable::BANK_TDB;
                    $data['bank_order_id'] = $bankOrder->id;
                    $data['type'] = $type;
                    $data['status'] = $status;
                    $data['status_comment'] = $statusComment;
                    $data['number'] = $phoneNumber;
                    $data['contract_number'] = $contractNumber;
                    $data['contract_name'] = $contractName;
                    $data['bill_cycle'] = $billCycle;
                    $data['contract_amount'] = $contractAmount;
                    $data['credit_control'] = 123;
                    BankpaymentTable::insert($data);
                    $bankOrder->status = BankpaymentTable::STAT_SUCCESS;
                    $bankOrder->save();
                    unset($bankOrder);
                }
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
                $logger->log('Error: '.$bankOrder->order_id .' Error message: '.$ex, sfFileLogger::ERR);
            }
        }
        }
        $logger->log('==========Ended bankPaymentFromTransaction TDB================', sfFileLogger::INFO);
        return TRUE;
    }

    /**
     * Candy цэнэглэлт Bankpayment-рүү хийх
     *  дамжуулах
     * @param object bank
     * @param int $limit
     * @return boolean
     * @throws Doctrine_Manager_Exception
     * @throws Doctrine_Query_Exception
     */
    public static function loyaltyBankpayment($bankOrder = null, $limit = 50)
    {
        if ($bankOrder instanceof BankTdb) {
            if (in_array($bankOrder->status, array(
                BankTdbTable::STAT_FAILED,
                BankTdbTable::STAT_PROCESS,
                BankTdbTable::STAT_FAILED_CHARGE,
                BankTdbTable::STAT_FAILED_OUTCOME))) {
                $bankOrder->status = self::STAT_PROCESS;
                $bankOrder->save();
            }
            $bankOrderRows = array($bankOrder);
        } elseif ($bankOrder) {
            return FALSE;
        } else {
            $bankOrderRows = self::updateForCharge(array(self::ACCOUNT_MOBIFINANCE_CANDY, self::ACCOUNT_CANDY_CASHIN), $limit);
        }
        foreach ($bankOrderRows as $bankOrder) {
            try {
                if (in_array($bankOrder->status, array(self::STAT_FAILED_CHARGE, self::STAT_FAILED))) {
                    $bankOrder->status = self::STAT_PROCESS;
                    $bankOrder->save();
                }

                $txnDesc = preg_replace("/\([0-9]{8}\)/", "", $bankOrder->order_p);
                $chargeNumber = LoyaltyCharge::findCandyLoan($txnDesc);
                if ($chargeNumber) {
                    $loanAmount = null;
                    $cashInAmount = null;
                    $type = null;
                    $isQpay = LoyaltyCharge::checkCandyQpay($txnDesc);
                    if ($isQpay) {
                        $type = BankpaymentTable::TYPE_CANDY_QPAY;
                        self::insertBankpaymentLoyalty($bankOrder, $type, $chargeNumber, $bankOrder->order_amount);
                        $bankOrder->setStatus(BankTdbTable::STAT_SUCCESS);
                        $bankOrder->save();
                        continue;
                    }
                    $isCandyAgent = LoyaltyCharge::checkCandyAgent($txnDesc);
                    $isCandyAccount = LoyaltyCharge::checkCandyAccount($bankOrder['bank_account'], 'TDB');
                    if ($bankOrder['bank_account'] == self::ACCOUNT_MOBIFINANCE_CANDY) {
                        $loanCheck = LoyaltyCharge::checkLoan($chargeNumber);
                        if ($loanCheck['Code'] !== 0) {
                            $status = self::STAT_FAILED_CHARGE;
                            $bankOrder->setStatus($status);
                            $bankOrder->save();
                            self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_CASHIN, $chargeNumber, $bankOrder['order_amount'], '', 4);
                            continue;
                        }
                        // Zeeltei bol
                        if ($loanCheck['Result']['items'][0]['total'] > 0) {
                            $cashInAmount = $bankOrder['order_amount'] - $loanCheck['Result']['items'][0]['total'];
                            $loanAmount = $loanCheck['Result']['items'][0]['total'];
                            if ($cashInAmount < 0) {
                                $cashInAmount = null;
                                $loanAmount = $bankOrder['order_amount'];
                            }
                        } else {
                            $cashInAmount = $bankOrder['order_amount'];
                        }
                    } else {
                        $cashInAmount = $bankOrder['order_amount'];
                    }

                    if ($isCandyAgent && $isCandyAccount) {
                        $loyaltyId = LoyaltyCharge::getCandy($isCandyAgent);
                        if ($loyaltyId != 0) {
                            self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_AGENT, $chargeNumber, $bankOrder->order_amount, $loyaltyId);
                        } else {
                            if (!$loanAmount) {
                                self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_CASHIN, $chargeNumber, $cashInAmount);
                            } else {
                                if ($cashInAmount > 0) {
                                    $bankpayment = self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_CASHIN, $chargeNumber, $cashInAmount);
                                    self::copyBankpaymentLoyalty($bankpayment, $loanAmount, BankpaymentTable::TYPE_CANDY_LOAN, $chargeNumber);
                                } else {
                                    self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_LOAN, $chargeNumber, $loanAmount);
                                }
                            }
                        }
                    } else {
                        if (!$loanAmount) {
                            self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_CASHIN, $chargeNumber, $cashInAmount);
                        } else {
                            if ($cashInAmount) {
                                $bankpayment = self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_CASHIN, $chargeNumber, $cashInAmount);
                                self::copyBankpaymentLoyalty($bankpayment, $loanAmount, BankpaymentTable::TYPE_CANDY_LOAN, $chargeNumber);
                            } else {
                                self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_LOAN, $chargeNumber, $loanAmount);
                            }
                        }
                    }
                    $bankOrder->setStatus(BankTdbTable::STAT_SUCCESS);
                    $bankOrder->save();
                    unset($bankOrder);
                } else {
                    if ($bankOrder['bank_account'] == self::ACCOUNT_MOBIFINANCE_CANDY) {
                        self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_LOAN, $chargeNumber, $bankOrder['order_amount'], '', BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE);
                    } else {
                        self::insertBankpaymentLoyalty($bankOrder, BankpaymentTable::TYPE_CANDY_CASHIN, $chargeNumber, $bankOrder['order_amount'], '', BankpaymentTable::STAT_BANKPAYMENT_TRANS_VALUE);
                    }
                    $bankOrder->setStatus(self::STAT_FAILED_CHARGE);
                    $bankOrder->save();
                }
            } catch (Exception $ex) {
                $bankOrder->status = self::STAT_FAILED;
                $bankOrder->save();
            }
        }

        return TRUE;
    }

    public static function insertBankpaymentLoyalty($bankOrder, $type, $chargeNumber, $amount, $loyaltyId = '', $status = 1) {
        $data = array();
        $data['vendor_id'] = VendorTable::BANK_TDB;
        $data['bank_order_id'] = $bankOrder->id;
        $data['type'] = $type;
        $data['status'] = $status;
        $data['status_comment'] = '';
        $data['number'] = $chargeNumber;
        $data['contract_number'] = $loyaltyId;
        $data['contract_name'] = '';
        $data['bill_cycle'] = '';
        $data['paid_amount'] = $amount;
        $data['contract_amount'] = '';
        $data['credit_control'] = 123;
        $bankpayment = BankpaymentTable::insert($data);
        return $bankpayment;
    }

    public static function copyBankpaymentLoyalty($bankpayment, $amount, $type, $chargeNumber)
    {
        $childCount = (int) BankpaymentTable::getChildCount($bankpayment['id']);
        $values = array();
        $values['parent_id'] = $bankpayment['id'];
        $values['vendor_id'] = $bankpayment['vendor_id'];
        $values['type'] = $type;
        $values['bank_order_id'] = $bankpayment['bank_order_id'];
        $values['child_num'] = ++$childCount;
        $values['paid_amount'] = $amount;
        $values['status'] = BankpaymentTable::STAT_NEW;
        $values['number'] = $chargeNumber;
        BankpaymentTable::insert($values);
    }
    
}
