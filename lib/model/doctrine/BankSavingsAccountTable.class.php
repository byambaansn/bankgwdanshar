<?php

/**
 * BankSavingsAccountTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class BankSavingsAccountTable extends Doctrine_Table
{
    #

    const ACCOUNT_DEALER = '106000026979';
    const ACCOUNT_MOBIXPRESS = 2;
    const ACCOUNT_CALLPAYMENT = '100000139627';
    const ACCOUNT_MOBINET = '102200117836';
    const ACCOUNT_MOBICOM_ALL = '106000026987';
    const ACCOUNT_CANDY_LOAN = '106900331147';

    /**
     * Returns an instance of this class.
     *
     * @return object BankSavingsAccountTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('BankSavingsAccount');
    }

    public static function getForSelectAccounts()
    {
        $rows = Doctrine_Query::create()
                ->from('BankSavingsAccount')
                ->execute();

        return $rows;
    }

    /**
     * Банкнаас дансны мэдээлэл татах
     * 
     * @return boolean
     */
    public static function resetAccounts($url, $username, $password)
    {
        Doctrine_Query::create()
                ->from('BankSavingsAccount')
                ->delete();

        $client = new SoapClient($url);
        $getSuccess = 0;
        $setSuccess = 0;
        $errorCode = -1;
        $desc = '-';
        $request = $url;

        try {
            $params = array(
                'username' => $username,
                'pass' => $password,
            );
            $result = $client->__call('GetAcnt', array('parameters' => $params));
            $getSuccess = 1;
        } catch (SoapFault $e) {
            $desc = $e->faultstring;
        }
        $response = '-';
        $responseSet = '-';

        $resultArr = json_decode(json_encode($result), true);

        if (count($resultArr['GetAcntResult'])) {
            $response = print_r($result, true);
            $resultArr = $resultArr['GetAcntResult'];
            $errorCode = $resultArr['code'];
            $list = $resultArr['list'];
            $desc .= $resultArr['msg'];
        }
        // хоосон утга шалгах
        if ($errorCode == 0 && isset($list['AcntOrderItem']) && count($list['AcntOrderItem'])) {
            if (isset($list['AcntOrderItem'][0])) {
                foreach ($list['AcntOrderItem'] as $account) {
                    self::insertAccount($account['AcntNo'], $account['AcntName'], $account['Pin'], $account['StartDate'], $account['EndDate']);
                }
            } else {
                $account = $list['AcntOrderItem'];
            }
        }

        LogTools::setLogSavingsInit($request, $response, $responseSet, $errorCode, $desc, $getSuccess, $setSuccess, $username);

        unset($result);
        unset($response);
        unset($responseSet);
        unset($resultArr);

        return TRUE;
    }

    /**
     * insertAccount code
     *
     * @return object BankSavingsAccountTable
     */
    public static function insertAccount($acc, $name, $pin, $start, $end)
    {
        try {
            $encPin = AppTools::passEncrypt($pin);
            $account = new BankSavingsAccount();
            $account->setName($name);
            $account->setAccount($acc);
            $account->setPin($encPin);
            $account->setStartDate($start);
            $account->setEndDate($end);
            $account->setCreatedAt(date("Y-m-d H:i:s"));
            $account->save();
            return $account;
        } catch (Exception $exc) {
            echo $exc->getTraceAsString();
        }
    }

    /**
     * Payment code
     *
     * @return object BankSavingsAccountTable
     */
    public static function getPaymentCode($account)
    {
        $code = 0;
        switch ($account) {
            case BankSavingsTable::ACCOUNT_MOBINET_PAYMENT:
                $code = 'BNK94';
                break;
            case BankSavingsTable::ACCOUNT_CALLPAYMENT:
                $code = 'BNKZO';
                break;
            case BankSavingsTable::ACCOUNT_PRODUCT_MOBINET:
                $code = 'CNKJW';
                break;
            default:
                break;
        }
        return $code;
    }

}
